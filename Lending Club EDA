{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled21.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMZ8Jwy4xdVDe75DlPLTpAX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vijayzone/Course/blob/master/Lending%20Club%20EDA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "FBBQneCUCXna",
        "outputId": "01a497b3-cf89-4790-d4de-234c001c60bf"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-270f6b3e-d134-41f5-8566-b6a87db40873\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-270f6b3e-d134-41f5-8566-b6a87db40873\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving loan.csv to loan.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "pd.set_option('display.max_columns', None)"
      ],
      "metadata": {
        "id": "UFpKQS8oFK6B"
      },
      "execution_count": 107,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details = pd.read_csv('loan.csv', header = 0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qxlkzvbwFbd_",
        "outputId": "d0624644-107a-493e-8bc5-524ea75be2fa"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: DtypeWarning: Columns (47) have mixed types.Specify dtype option on import or set low_memory=False.\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF = pd.DataFrame(Loan_Details)"
      ],
      "metadata": {
        "id": "zZgahrDIFzMm"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 721
        },
        "id": "XSmCAKiiF7yo",
        "outputId": "b8b8e013-97db-4639-f110-459976cf5176"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        id  member_id  loan_amnt  funded_amnt  funded_amnt_inv        term  \\\n",
              "0  1077501    1296599       5000         5000           4975.0   36 months   \n",
              "1  1077430    1314167       2500         2500           2500.0   60 months   \n",
              "2  1077175    1313524       2400         2400           2400.0   36 months   \n",
              "3  1076863    1277178      10000        10000          10000.0   36 months   \n",
              "4  1075358    1311748       3000         3000           3000.0   60 months   \n",
              "\n",
              "  int_rate  installment grade sub_grade                 emp_title emp_length  \\\n",
              "0   10.65%       162.87     B        B2                       NaN  10+ years   \n",
              "1   15.27%        59.83     C        C4                     Ryder   < 1 year   \n",
              "2   15.96%        84.33     C        C5                       NaN  10+ years   \n",
              "3   13.49%       339.31     C        C1       AIR RESOURCES BOARD  10+ years   \n",
              "4   12.69%        67.79     B        B5  University Medical Group     1 year   \n",
              "\n",
              "  home_ownership  annual_inc verification_status issue_d  loan_status  \\\n",
              "0           RENT     24000.0            Verified  Dec-11   Fully Paid   \n",
              "1           RENT     30000.0     Source Verified  Dec-11  Charged Off   \n",
              "2           RENT     12252.0        Not Verified  Dec-11   Fully Paid   \n",
              "3           RENT     49200.0     Source Verified  Dec-11   Fully Paid   \n",
              "4           RENT     80000.0     Source Verified  Dec-11      Current   \n",
              "\n",
              "  pymnt_plan                                                url  \\\n",
              "0          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "1          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "2          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "3          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "4          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "\n",
              "                                                desc         purpose  \\\n",
              "0    Borrower added on 12/22/11 > I need to upgra...     credit_card   \n",
              "1    Borrower added on 12/22/11 > I plan to use t...             car   \n",
              "2                                                NaN  small_business   \n",
              "3    Borrower added on 12/21/11 > to pay for prop...           other   \n",
              "4    Borrower added on 12/21/11 > I plan on combi...           other   \n",
              "\n",
              "                  title zip_code addr_state    dti  delinq_2yrs  \\\n",
              "0              Computer    860xx         AZ  27.65            0   \n",
              "1                  bike    309xx         GA   1.00            0   \n",
              "2  real estate business    606xx         IL   8.72            0   \n",
              "3              personel    917xx         CA  20.00            0   \n",
              "4              Personal    972xx         OR  17.94            0   \n",
              "\n",
              "  earliest_cr_line  inq_last_6mths  mths_since_last_delinq  \\\n",
              "0           Jan-85               1                     NaN   \n",
              "1           Apr-99               5                     NaN   \n",
              "2           Nov-01               2                     NaN   \n",
              "3           Feb-96               1                    35.0   \n",
              "4           Jan-96               0                    38.0   \n",
              "\n",
              "   mths_since_last_record  open_acc  pub_rec  revol_bal revol_util  total_acc  \\\n",
              "0                     NaN         3        0      13648     83.70%          9   \n",
              "1                     NaN         3        0       1687      9.40%          4   \n",
              "2                     NaN         2        0       2956     98.50%         10   \n",
              "3                     NaN        10        0       5598        21%         37   \n",
              "4                     NaN        15        0      27783     53.90%         38   \n",
              "\n",
              "  initial_list_status  out_prncp  out_prncp_inv   total_pymnt  \\\n",
              "0                   f       0.00           0.00   5863.155187   \n",
              "1                   f       0.00           0.00   1008.710000   \n",
              "2                   f       0.00           0.00   3005.666844   \n",
              "3                   f       0.00           0.00  12231.890000   \n",
              "4                   f     524.06         524.06   3513.330000   \n",
              "\n",
              "   total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
              "0          5833.84          5000.00         863.16                0.00   \n",
              "1          1008.71           456.46         435.17                0.00   \n",
              "2          3005.67          2400.00         605.67                0.00   \n",
              "3         12231.89         10000.00        2214.92               16.97   \n",
              "4          3513.33          2475.94        1037.39                0.00   \n",
              "\n",
              "   recoveries  collection_recovery_fee last_pymnt_d  last_pymnt_amnt  \\\n",
              "0        0.00                     0.00       Jan-15           171.62   \n",
              "1      117.08                     1.11       Apr-13           119.66   \n",
              "2        0.00                     0.00       Jun-14           649.91   \n",
              "3        0.00                     0.00       Jan-15           357.48   \n",
              "4        0.00                     0.00       May-16            67.79   \n",
              "\n",
              "  next_pymnt_d last_credit_pull_d  collections_12_mths_ex_med  \\\n",
              "0          NaN             May-16                         0.0   \n",
              "1          NaN             Sep-13                         0.0   \n",
              "2          NaN             May-16                         0.0   \n",
              "3          NaN             Apr-16                         0.0   \n",
              "4       Jun-16             May-16                         0.0   \n",
              "\n",
              "   mths_since_last_major_derog  policy_code application_type  \\\n",
              "0                          NaN            1       INDIVIDUAL   \n",
              "1                          NaN            1       INDIVIDUAL   \n",
              "2                          NaN            1       INDIVIDUAL   \n",
              "3                          NaN            1       INDIVIDUAL   \n",
              "4                          NaN            1       INDIVIDUAL   \n",
              "\n",
              "   annual_inc_joint  dti_joint  verification_status_joint  acc_now_delinq  \\\n",
              "0               NaN        NaN                        NaN               0   \n",
              "1               NaN        NaN                        NaN               0   \n",
              "2               NaN        NaN                        NaN               0   \n",
              "3               NaN        NaN                        NaN               0   \n",
              "4               NaN        NaN                        NaN               0   \n",
              "\n",
              "   tot_coll_amt  tot_cur_bal  open_acc_6m  open_il_6m  open_il_12m  \\\n",
              "0           NaN          NaN          NaN         NaN          NaN   \n",
              "1           NaN          NaN          NaN         NaN          NaN   \n",
              "2           NaN          NaN          NaN         NaN          NaN   \n",
              "3           NaN          NaN          NaN         NaN          NaN   \n",
              "4           NaN          NaN          NaN         NaN          NaN   \n",
              "\n",
              "   open_il_24m  mths_since_rcnt_il  total_bal_il  il_util  open_rv_12m  \\\n",
              "0          NaN                 NaN           NaN      NaN          NaN   \n",
              "1          NaN                 NaN           NaN      NaN          NaN   \n",
              "2          NaN                 NaN           NaN      NaN          NaN   \n",
              "3          NaN                 NaN           NaN      NaN          NaN   \n",
              "4          NaN                 NaN           NaN      NaN          NaN   \n",
              "\n",
              "   open_rv_24m  max_bal_bc  all_util  total_rev_hi_lim  inq_fi  total_cu_tl  \\\n",
              "0          NaN         NaN       NaN               NaN     NaN          NaN   \n",
              "1          NaN         NaN       NaN               NaN     NaN          NaN   \n",
              "2          NaN         NaN       NaN               NaN     NaN          NaN   \n",
              "3          NaN         NaN       NaN               NaN     NaN          NaN   \n",
              "4          NaN         NaN       NaN               NaN     NaN          NaN   \n",
              "\n",
              "   inq_last_12m  acc_open_past_24mths  avg_cur_bal  bc_open_to_buy  bc_util  \\\n",
              "0           NaN                   NaN          NaN             NaN      NaN   \n",
              "1           NaN                   NaN          NaN             NaN      NaN   \n",
              "2           NaN                   NaN          NaN             NaN      NaN   \n",
              "3           NaN                   NaN          NaN             NaN      NaN   \n",
              "4           NaN                   NaN          NaN             NaN      NaN   \n",
              "\n",
              "   chargeoff_within_12_mths  delinq_amnt  mo_sin_old_il_acct  \\\n",
              "0                       0.0            0                 NaN   \n",
              "1                       0.0            0                 NaN   \n",
              "2                       0.0            0                 NaN   \n",
              "3                       0.0            0                 NaN   \n",
              "4                       0.0            0                 NaN   \n",
              "\n",
              "   mo_sin_old_rev_tl_op  mo_sin_rcnt_rev_tl_op  mo_sin_rcnt_tl  mort_acc  \\\n",
              "0                   NaN                    NaN             NaN       NaN   \n",
              "1                   NaN                    NaN             NaN       NaN   \n",
              "2                   NaN                    NaN             NaN       NaN   \n",
              "3                   NaN                    NaN             NaN       NaN   \n",
              "4                   NaN                    NaN             NaN       NaN   \n",
              "\n",
              "   mths_since_recent_bc  mths_since_recent_bc_dlq  mths_since_recent_inq  \\\n",
              "0                   NaN                       NaN                    NaN   \n",
              "1                   NaN                       NaN                    NaN   \n",
              "2                   NaN                       NaN                    NaN   \n",
              "3                   NaN                       NaN                    NaN   \n",
              "4                   NaN                       NaN                    NaN   \n",
              "\n",
              "   mths_since_recent_revol_delinq  num_accts_ever_120_pd  num_actv_bc_tl  \\\n",
              "0                             NaN                    NaN             NaN   \n",
              "1                             NaN                    NaN             NaN   \n",
              "2                             NaN                    NaN             NaN   \n",
              "3                             NaN                    NaN             NaN   \n",
              "4                             NaN                    NaN             NaN   \n",
              "\n",
              "   num_actv_rev_tl  num_bc_sats  num_bc_tl  num_il_tl  num_op_rev_tl  \\\n",
              "0              NaN          NaN        NaN        NaN            NaN   \n",
              "1              NaN          NaN        NaN        NaN            NaN   \n",
              "2              NaN          NaN        NaN        NaN            NaN   \n",
              "3              NaN          NaN        NaN        NaN            NaN   \n",
              "4              NaN          NaN        NaN        NaN            NaN   \n",
              "\n",
              "   num_rev_accts  num_rev_tl_bal_gt_0  num_sats  num_tl_120dpd_2m  \\\n",
              "0            NaN                  NaN       NaN               NaN   \n",
              "1            NaN                  NaN       NaN               NaN   \n",
              "2            NaN                  NaN       NaN               NaN   \n",
              "3            NaN                  NaN       NaN               NaN   \n",
              "4            NaN                  NaN       NaN               NaN   \n",
              "\n",
              "   num_tl_30dpd  num_tl_90g_dpd_24m  num_tl_op_past_12m  pct_tl_nvr_dlq  \\\n",
              "0           NaN                 NaN                 NaN             NaN   \n",
              "1           NaN                 NaN                 NaN             NaN   \n",
              "2           NaN                 NaN                 NaN             NaN   \n",
              "3           NaN                 NaN                 NaN             NaN   \n",
              "4           NaN                 NaN                 NaN             NaN   \n",
              "\n",
              "   percent_bc_gt_75  pub_rec_bankruptcies  tax_liens  tot_hi_cred_lim  \\\n",
              "0               NaN                   0.0        0.0              NaN   \n",
              "1               NaN                   0.0        0.0              NaN   \n",
              "2               NaN                   0.0        0.0              NaN   \n",
              "3               NaN                   0.0        0.0              NaN   \n",
              "4               NaN                   0.0        0.0              NaN   \n",
              "\n",
              "   total_bal_ex_mort  total_bc_limit  total_il_high_credit_limit  \n",
              "0                NaN             NaN                         NaN  \n",
              "1                NaN             NaN                         NaN  \n",
              "2                NaN             NaN                         NaN  \n",
              "3                NaN             NaN                         NaN  \n",
              "4                NaN             NaN                         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-862e3e5b-f71c-4692-b3e9-d536393720e7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>member_id</th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>funded_amnt_inv</th>\n",
              "      <th>term</th>\n",
              "      <th>int_rate</th>\n",
              "      <th>installment</th>\n",
              "      <th>grade</th>\n",
              "      <th>sub_grade</th>\n",
              "      <th>emp_title</th>\n",
              "      <th>emp_length</th>\n",
              "      <th>home_ownership</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>verification_status</th>\n",
              "      <th>issue_d</th>\n",
              "      <th>loan_status</th>\n",
              "      <th>pymnt_plan</th>\n",
              "      <th>url</th>\n",
              "      <th>desc</th>\n",
              "      <th>purpose</th>\n",
              "      <th>title</th>\n",
              "      <th>zip_code</th>\n",
              "      <th>addr_state</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>earliest_cr_line</th>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <th>mths_since_last_delinq</th>\n",
              "      <th>mths_since_last_record</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>revol_util</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>initial_list_status</th>\n",
              "      <th>out_prncp</th>\n",
              "      <th>out_prncp_inv</th>\n",
              "      <th>total_pymnt</th>\n",
              "      <th>total_pymnt_inv</th>\n",
              "      <th>total_rec_prncp</th>\n",
              "      <th>total_rec_int</th>\n",
              "      <th>total_rec_late_fee</th>\n",
              "      <th>recoveries</th>\n",
              "      <th>collection_recovery_fee</th>\n",
              "      <th>last_pymnt_d</th>\n",
              "      <th>last_pymnt_amnt</th>\n",
              "      <th>next_pymnt_d</th>\n",
              "      <th>last_credit_pull_d</th>\n",
              "      <th>collections_12_mths_ex_med</th>\n",
              "      <th>mths_since_last_major_derog</th>\n",
              "      <th>policy_code</th>\n",
              "      <th>application_type</th>\n",
              "      <th>annual_inc_joint</th>\n",
              "      <th>dti_joint</th>\n",
              "      <th>verification_status_joint</th>\n",
              "      <th>acc_now_delinq</th>\n",
              "      <th>tot_coll_amt</th>\n",
              "      <th>tot_cur_bal</th>\n",
              "      <th>open_acc_6m</th>\n",
              "      <th>open_il_6m</th>\n",
              "      <th>open_il_12m</th>\n",
              "      <th>open_il_24m</th>\n",
              "      <th>mths_since_rcnt_il</th>\n",
              "      <th>total_bal_il</th>\n",
              "      <th>il_util</th>\n",
              "      <th>open_rv_12m</th>\n",
              "      <th>open_rv_24m</th>\n",
              "      <th>max_bal_bc</th>\n",
              "      <th>all_util</th>\n",
              "      <th>total_rev_hi_lim</th>\n",
              "      <th>inq_fi</th>\n",
              "      <th>total_cu_tl</th>\n",
              "      <th>inq_last_12m</th>\n",
              "      <th>acc_open_past_24mths</th>\n",
              "      <th>avg_cur_bal</th>\n",
              "      <th>bc_open_to_buy</th>\n",
              "      <th>bc_util</th>\n",
              "      <th>chargeoff_within_12_mths</th>\n",
              "      <th>delinq_amnt</th>\n",
              "      <th>mo_sin_old_il_acct</th>\n",
              "      <th>mo_sin_old_rev_tl_op</th>\n",
              "      <th>mo_sin_rcnt_rev_tl_op</th>\n",
              "      <th>mo_sin_rcnt_tl</th>\n",
              "      <th>mort_acc</th>\n",
              "      <th>mths_since_recent_bc</th>\n",
              "      <th>mths_since_recent_bc_dlq</th>\n",
              "      <th>mths_since_recent_inq</th>\n",
              "      <th>mths_since_recent_revol_delinq</th>\n",
              "      <th>num_accts_ever_120_pd</th>\n",
              "      <th>num_actv_bc_tl</th>\n",
              "      <th>num_actv_rev_tl</th>\n",
              "      <th>num_bc_sats</th>\n",
              "      <th>num_bc_tl</th>\n",
              "      <th>num_il_tl</th>\n",
              "      <th>num_op_rev_tl</th>\n",
              "      <th>num_rev_accts</th>\n",
              "      <th>num_rev_tl_bal_gt_0</th>\n",
              "      <th>num_sats</th>\n",
              "      <th>num_tl_120dpd_2m</th>\n",
              "      <th>num_tl_30dpd</th>\n",
              "      <th>num_tl_90g_dpd_24m</th>\n",
              "      <th>num_tl_op_past_12m</th>\n",
              "      <th>pct_tl_nvr_dlq</th>\n",
              "      <th>percent_bc_gt_75</th>\n",
              "      <th>pub_rec_bankruptcies</th>\n",
              "      <th>tax_liens</th>\n",
              "      <th>tot_hi_cred_lim</th>\n",
              "      <th>total_bal_ex_mort</th>\n",
              "      <th>total_bc_limit</th>\n",
              "      <th>total_il_high_credit_limit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1077501</td>\n",
              "      <td>1296599</td>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "      <td>4975.0</td>\n",
              "      <td>36 months</td>\n",
              "      <td>10.65%</td>\n",
              "      <td>162.87</td>\n",
              "      <td>B</td>\n",
              "      <td>B2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10+ years</td>\n",
              "      <td>RENT</td>\n",
              "      <td>24000.0</td>\n",
              "      <td>Verified</td>\n",
              "      <td>Dec-11</td>\n",
              "      <td>Fully Paid</td>\n",
              "      <td>n</td>\n",
              "      <td>https://lendingclub.com/browse/loanDetail.acti...</td>\n",
              "      <td>Borrower added on 12/22/11 &gt; I need to upgra...</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>Computer</td>\n",
              "      <td>860xx</td>\n",
              "      <td>AZ</td>\n",
              "      <td>27.65</td>\n",
              "      <td>0</td>\n",
              "      <td>Jan-85</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>13648</td>\n",
              "      <td>83.70%</td>\n",
              "      <td>9</td>\n",
              "      <td>f</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5863.155187</td>\n",
              "      <td>5833.84</td>\n",
              "      <td>5000.00</td>\n",
              "      <td>863.16</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Jan-15</td>\n",
              "      <td>171.62</td>\n",
              "      <td>NaN</td>\n",
              "      <td>May-16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>INDIVIDUAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1077430</td>\n",
              "      <td>1314167</td>\n",
              "      <td>2500</td>\n",
              "      <td>2500</td>\n",
              "      <td>2500.0</td>\n",
              "      <td>60 months</td>\n",
              "      <td>15.27%</td>\n",
              "      <td>59.83</td>\n",
              "      <td>C</td>\n",
              "      <td>C4</td>\n",
              "      <td>Ryder</td>\n",
              "      <td>&lt; 1 year</td>\n",
              "      <td>RENT</td>\n",
              "      <td>30000.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>Dec-11</td>\n",
              "      <td>Charged Off</td>\n",
              "      <td>n</td>\n",
              "      <td>https://lendingclub.com/browse/loanDetail.acti...</td>\n",
              "      <td>Borrower added on 12/22/11 &gt; I plan to use t...</td>\n",
              "      <td>car</td>\n",
              "      <td>bike</td>\n",
              "      <td>309xx</td>\n",
              "      <td>GA</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0</td>\n",
              "      <td>Apr-99</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1687</td>\n",
              "      <td>9.40%</td>\n",
              "      <td>4</td>\n",
              "      <td>f</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1008.710000</td>\n",
              "      <td>1008.71</td>\n",
              "      <td>456.46</td>\n",
              "      <td>435.17</td>\n",
              "      <td>0.00</td>\n",
              "      <td>117.08</td>\n",
              "      <td>1.11</td>\n",
              "      <td>Apr-13</td>\n",
              "      <td>119.66</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Sep-13</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>INDIVIDUAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1077175</td>\n",
              "      <td>1313524</td>\n",
              "      <td>2400</td>\n",
              "      <td>2400</td>\n",
              "      <td>2400.0</td>\n",
              "      <td>36 months</td>\n",
              "      <td>15.96%</td>\n",
              "      <td>84.33</td>\n",
              "      <td>C</td>\n",
              "      <td>C5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10+ years</td>\n",
              "      <td>RENT</td>\n",
              "      <td>12252.0</td>\n",
              "      <td>Not Verified</td>\n",
              "      <td>Dec-11</td>\n",
              "      <td>Fully Paid</td>\n",
              "      <td>n</td>\n",
              "      <td>https://lendingclub.com/browse/loanDetail.acti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>small_business</td>\n",
              "      <td>real estate business</td>\n",
              "      <td>606xx</td>\n",
              "      <td>IL</td>\n",
              "      <td>8.72</td>\n",
              "      <td>0</td>\n",
              "      <td>Nov-01</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2956</td>\n",
              "      <td>98.50%</td>\n",
              "      <td>10</td>\n",
              "      <td>f</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3005.666844</td>\n",
              "      <td>3005.67</td>\n",
              "      <td>2400.00</td>\n",
              "      <td>605.67</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Jun-14</td>\n",
              "      <td>649.91</td>\n",
              "      <td>NaN</td>\n",
              "      <td>May-16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>INDIVIDUAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1076863</td>\n",
              "      <td>1277178</td>\n",
              "      <td>10000</td>\n",
              "      <td>10000</td>\n",
              "      <td>10000.0</td>\n",
              "      <td>36 months</td>\n",
              "      <td>13.49%</td>\n",
              "      <td>339.31</td>\n",
              "      <td>C</td>\n",
              "      <td>C1</td>\n",
              "      <td>AIR RESOURCES BOARD</td>\n",
              "      <td>10+ years</td>\n",
              "      <td>RENT</td>\n",
              "      <td>49200.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>Dec-11</td>\n",
              "      <td>Fully Paid</td>\n",
              "      <td>n</td>\n",
              "      <td>https://lendingclub.com/browse/loanDetail.acti...</td>\n",
              "      <td>Borrower added on 12/21/11 &gt; to pay for prop...</td>\n",
              "      <td>other</td>\n",
              "      <td>personel</td>\n",
              "      <td>917xx</td>\n",
              "      <td>CA</td>\n",
              "      <td>20.00</td>\n",
              "      <td>0</td>\n",
              "      <td>Feb-96</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>5598</td>\n",
              "      <td>21%</td>\n",
              "      <td>37</td>\n",
              "      <td>f</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>12231.890000</td>\n",
              "      <td>12231.89</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>2214.92</td>\n",
              "      <td>16.97</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>Jan-15</td>\n",
              "      <td>357.48</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Apr-16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>INDIVIDUAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1075358</td>\n",
              "      <td>1311748</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000</td>\n",
              "      <td>3000.0</td>\n",
              "      <td>60 months</td>\n",
              "      <td>12.69%</td>\n",
              "      <td>67.79</td>\n",
              "      <td>B</td>\n",
              "      <td>B5</td>\n",
              "      <td>University Medical Group</td>\n",
              "      <td>1 year</td>\n",
              "      <td>RENT</td>\n",
              "      <td>80000.0</td>\n",
              "      <td>Source Verified</td>\n",
              "      <td>Dec-11</td>\n",
              "      <td>Current</td>\n",
              "      <td>n</td>\n",
              "      <td>https://lendingclub.com/browse/loanDetail.acti...</td>\n",
              "      <td>Borrower added on 12/21/11 &gt; I plan on combi...</td>\n",
              "      <td>other</td>\n",
              "      <td>Personal</td>\n",
              "      <td>972xx</td>\n",
              "      <td>OR</td>\n",
              "      <td>17.94</td>\n",
              "      <td>0</td>\n",
              "      <td>Jan-96</td>\n",
              "      <td>0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>27783</td>\n",
              "      <td>53.90%</td>\n",
              "      <td>38</td>\n",
              "      <td>f</td>\n",
              "      <td>524.06</td>\n",
              "      <td>524.06</td>\n",
              "      <td>3513.330000</td>\n",
              "      <td>3513.33</td>\n",
              "      <td>2475.94</td>\n",
              "      <td>1037.39</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>May-16</td>\n",
              "      <td>67.79</td>\n",
              "      <td>Jun-16</td>\n",
              "      <td>May-16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>INDIVIDUAL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-862e3e5b-f71c-4692-b3e9-d536393720e7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-862e3e5b-f71c-4692-b3e9-d536393720e7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-862e3e5b-f71c-4692-b3e9-d536393720e7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.info"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y7ZFifVoF-g1",
        "outputId": "d3624571-0e0b-4d9c-a730-4bd3150b367d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of             id  member_id  loan_amnt  funded_amnt  funded_amnt_inv  \\\n",
              "0      1077501    1296599       5000         5000           4975.0   \n",
              "1      1077430    1314167       2500         2500           2500.0   \n",
              "2      1077175    1313524       2400         2400           2400.0   \n",
              "3      1076863    1277178      10000        10000          10000.0   \n",
              "4      1075358    1311748       3000         3000           3000.0   \n",
              "...        ...        ...        ...          ...              ...   \n",
              "39712    92187      92174       2500         2500           1075.0   \n",
              "39713    90665      90607       8500         8500            875.0   \n",
              "39714    90395      90390       5000         5000           1325.0   \n",
              "39715    90376      89243       5000         5000            650.0   \n",
              "39716    87023      86999       7500         7500            800.0   \n",
              "\n",
              "             term int_rate  installment grade sub_grade  \\\n",
              "0       36 months   10.65%       162.87     B        B2   \n",
              "1       60 months   15.27%        59.83     C        C4   \n",
              "2       36 months   15.96%        84.33     C        C5   \n",
              "3       36 months   13.49%       339.31     C        C1   \n",
              "4       60 months   12.69%        67.79     B        B5   \n",
              "...           ...      ...          ...   ...       ...   \n",
              "39712   36 months    8.07%        78.42     A        A4   \n",
              "39713   36 months   10.28%       275.38     C        C1   \n",
              "39714   36 months    8.07%       156.84     A        A4   \n",
              "39715   36 months    7.43%       155.38     A        A2   \n",
              "39716   36 months   13.75%       255.43     E        E2   \n",
              "\n",
              "                        emp_title emp_length home_ownership  annual_inc  \\\n",
              "0                             NaN  10+ years           RENT     24000.0   \n",
              "1                           Ryder   < 1 year           RENT     30000.0   \n",
              "2                             NaN  10+ years           RENT     12252.0   \n",
              "3             AIR RESOURCES BOARD  10+ years           RENT     49200.0   \n",
              "4        University Medical Group     1 year           RENT     80000.0   \n",
              "...                           ...        ...            ...         ...   \n",
              "39712             FiSite Research    4 years       MORTGAGE    110000.0   \n",
              "39713  Squarewave Solutions, Ltd.    3 years           RENT     18000.0   \n",
              "39714                         NaN   < 1 year       MORTGAGE    100000.0   \n",
              "39715                         NaN   < 1 year       MORTGAGE    200000.0   \n",
              "39716            Evergreen Center   < 1 year            OWN     22000.0   \n",
              "\n",
              "      verification_status issue_d  loan_status pymnt_plan  \\\n",
              "0                Verified  Dec-11   Fully Paid          n   \n",
              "1         Source Verified  Dec-11  Charged Off          n   \n",
              "2            Not Verified  Dec-11   Fully Paid          n   \n",
              "3         Source Verified  Dec-11   Fully Paid          n   \n",
              "4         Source Verified  Dec-11      Current          n   \n",
              "...                   ...     ...          ...        ...   \n",
              "39712        Not Verified  Jul-07   Fully Paid          n   \n",
              "39713        Not Verified  Jul-07   Fully Paid          n   \n",
              "39714        Not Verified  Jul-07   Fully Paid          n   \n",
              "39715        Not Verified  Jul-07   Fully Paid          n   \n",
              "39716        Not Verified  Jun-07   Fully Paid          n   \n",
              "\n",
              "                                                     url  \\\n",
              "0      https://lendingclub.com/browse/loanDetail.acti...   \n",
              "1      https://lendingclub.com/browse/loanDetail.acti...   \n",
              "2      https://lendingclub.com/browse/loanDetail.acti...   \n",
              "3      https://lendingclub.com/browse/loanDetail.acti...   \n",
              "4      https://lendingclub.com/browse/loanDetail.acti...   \n",
              "...                                                  ...   \n",
              "39712  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39713  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39714  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39715  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39716  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "\n",
              "                                                    desc             purpose  \\\n",
              "0        Borrower added on 12/22/11 > I need to upgra...         credit_card   \n",
              "1        Borrower added on 12/22/11 > I plan to use t...                 car   \n",
              "2                                                    NaN      small_business   \n",
              "3        Borrower added on 12/21/11 > to pay for prop...               other   \n",
              "4        Borrower added on 12/21/11 > I plan on combi...               other   \n",
              "...                                                  ...                 ...   \n",
              "39712  Our current gutter system on our home is old a...    home_improvement   \n",
              "39713  The rate of interest and fees incurred by carr...         credit_card   \n",
              "39714                                                NaN  debt_consolidation   \n",
              "39715                                                NaN               other   \n",
              "39716  I plan to consolidate over $7,000 of debt: a c...  debt_consolidation   \n",
              "\n",
              "                           title zip_code addr_state    dti  delinq_2yrs  \\\n",
              "0                       Computer    860xx         AZ  27.65            0   \n",
              "1                           bike    309xx         GA   1.00            0   \n",
              "2           real estate business    606xx         IL   8.72            0   \n",
              "3                       personel    917xx         CA  20.00            0   \n",
              "4                       Personal    972xx         OR  17.94            0   \n",
              "...                          ...      ...        ...    ...          ...   \n",
              "39712           Home Improvement    802xx         CO  11.33            0   \n",
              "39713  Retiring credit card debt    274xx         NC   6.40            1   \n",
              "39714     MBA Loan Consolidation    017xx         MA   2.30            0   \n",
              "39715                   JAL Loan    208xx         MD   3.72            0   \n",
              "39716         Consolidation Loan    027xx         MA  14.29            1   \n",
              "\n",
              "      earliest_cr_line  inq_last_6mths  mths_since_last_delinq  \\\n",
              "0               Jan-85               1                     NaN   \n",
              "1               Apr-99               5                     NaN   \n",
              "2               Nov-01               2                     NaN   \n",
              "3               Feb-96               1                    35.0   \n",
              "4               Jan-96               0                    38.0   \n",
              "...                ...             ...                     ...   \n",
              "39712           Nov-90               0                     0.0   \n",
              "39713           Dec-86               1                     5.0   \n",
              "39714           Oct-98               0                     0.0   \n",
              "39715           Nov-88               0                     0.0   \n",
              "39716           Oct-03               0                    11.0   \n",
              "\n",
              "       mths_since_last_record  open_acc  pub_rec  revol_bal revol_util  \\\n",
              "0                         NaN         3        0      13648     83.70%   \n",
              "1                         NaN         3        0       1687      9.40%   \n",
              "2                         NaN         2        0       2956     98.50%   \n",
              "3                         NaN        10        0       5598        21%   \n",
              "4                         NaN        15        0      27783     53.90%   \n",
              "...                       ...       ...      ...        ...        ...   \n",
              "39712                     0.0        13        0       7274     13.10%   \n",
              "39713                     0.0         6        0       8847     26.90%   \n",
              "39714                     0.0        11        0       9698     19.40%   \n",
              "39715                     0.0        17        0      85607      0.70%   \n",
              "39716                     0.0         7        0       4175     51.50%   \n",
              "\n",
              "       total_acc initial_list_status  out_prncp  out_prncp_inv   total_pymnt  \\\n",
              "0              9                   f       0.00           0.00   5863.155187   \n",
              "1              4                   f       0.00           0.00   1008.710000   \n",
              "2             10                   f       0.00           0.00   3005.666844   \n",
              "3             37                   f       0.00           0.00  12231.890000   \n",
              "4             38                   f     524.06         524.06   3513.330000   \n",
              "...          ...                 ...        ...            ...           ...   \n",
              "39712         40                   f       0.00           0.00   2822.969293   \n",
              "39713          9                   f       0.00           0.00   9913.491822   \n",
              "39714         20                   f       0.00           0.00   5272.161128   \n",
              "39715         26                   f       0.00           0.00   5174.198551   \n",
              "39716          8                   f       0.00           0.00   9195.263334   \n",
              "\n",
              "       total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
              "0              5833.84          5000.00         863.16                0.00   \n",
              "1              1008.71           456.46         435.17                0.00   \n",
              "2              3005.67          2400.00         605.67                0.00   \n",
              "3             12231.89         10000.00        2214.92               16.97   \n",
              "4              3513.33          2475.94        1037.39                0.00   \n",
              "...                ...              ...            ...                 ...   \n",
              "39712          1213.88          2500.00         322.97                0.00   \n",
              "39713          1020.51          8500.00        1413.49                0.00   \n",
              "39714          1397.12          5000.00         272.16                0.00   \n",
              "39715           672.66          5000.00         174.20                0.00   \n",
              "39716           980.83          7500.00        1695.26                0.00   \n",
              "\n",
              "       recoveries  collection_recovery_fee last_pymnt_d  last_pymnt_amnt  \\\n",
              "0            0.00                     0.00       Jan-15           171.62   \n",
              "1          117.08                     1.11       Apr-13           119.66   \n",
              "2            0.00                     0.00       Jun-14           649.91   \n",
              "3            0.00                     0.00       Jan-15           357.48   \n",
              "4            0.00                     0.00       May-16            67.79   \n",
              "...           ...                      ...          ...              ...   \n",
              "39712        0.00                     0.00       Jul-10            80.90   \n",
              "39713        0.00                     0.00       Jul-10           281.94   \n",
              "39714        0.00                     0.00       Apr-08             0.00   \n",
              "39715        0.00                     0.00       Jan-08             0.00   \n",
              "39716        0.00                     0.00       Jun-10           256.59   \n",
              "\n",
              "      next_pymnt_d last_credit_pull_d  collections_12_mths_ex_med  \\\n",
              "0              NaN             May-16                         0.0   \n",
              "1              NaN             Sep-13                         0.0   \n",
              "2              NaN             May-16                         0.0   \n",
              "3              NaN             Apr-16                         0.0   \n",
              "4           Jun-16             May-16                         0.0   \n",
              "...            ...                ...                         ...   \n",
              "39712          NaN             Jun-10                         NaN   \n",
              "39713          NaN             Jul-10                         NaN   \n",
              "39714          NaN             Jun-07                         NaN   \n",
              "39715          NaN             Jun-07                         NaN   \n",
              "39716          NaN             Jun-10                         NaN   \n",
              "\n",
              "       mths_since_last_major_derog  policy_code application_type  \\\n",
              "0                              NaN            1       INDIVIDUAL   \n",
              "1                              NaN            1       INDIVIDUAL   \n",
              "2                              NaN            1       INDIVIDUAL   \n",
              "3                              NaN            1       INDIVIDUAL   \n",
              "4                              NaN            1       INDIVIDUAL   \n",
              "...                            ...          ...              ...   \n",
              "39712                          NaN            1       INDIVIDUAL   \n",
              "39713                          NaN            1       INDIVIDUAL   \n",
              "39714                          NaN            1       INDIVIDUAL   \n",
              "39715                          NaN            1       INDIVIDUAL   \n",
              "39716                          NaN            1       INDIVIDUAL   \n",
              "\n",
              "       annual_inc_joint  dti_joint  verification_status_joint  acc_now_delinq  \\\n",
              "0                   NaN        NaN                        NaN               0   \n",
              "1                   NaN        NaN                        NaN               0   \n",
              "2                   NaN        NaN                        NaN               0   \n",
              "3                   NaN        NaN                        NaN               0   \n",
              "4                   NaN        NaN                        NaN               0   \n",
              "...                 ...        ...                        ...             ...   \n",
              "39712               NaN        NaN                        NaN               0   \n",
              "39713               NaN        NaN                        NaN               0   \n",
              "39714               NaN        NaN                        NaN               0   \n",
              "39715               NaN        NaN                        NaN               0   \n",
              "39716               NaN        NaN                        NaN               0   \n",
              "\n",
              "       tot_coll_amt  tot_cur_bal  open_acc_6m  open_il_6m  open_il_12m  \\\n",
              "0               NaN          NaN          NaN         NaN          NaN   \n",
              "1               NaN          NaN          NaN         NaN          NaN   \n",
              "2               NaN          NaN          NaN         NaN          NaN   \n",
              "3               NaN          NaN          NaN         NaN          NaN   \n",
              "4               NaN          NaN          NaN         NaN          NaN   \n",
              "...             ...          ...          ...         ...          ...   \n",
              "39712           NaN          NaN          NaN         NaN          NaN   \n",
              "39713           NaN          NaN          NaN         NaN          NaN   \n",
              "39714           NaN          NaN          NaN         NaN          NaN   \n",
              "39715           NaN          NaN          NaN         NaN          NaN   \n",
              "39716           NaN          NaN          NaN         NaN          NaN   \n",
              "\n",
              "       open_il_24m  mths_since_rcnt_il  total_bal_il  il_util  open_rv_12m  \\\n",
              "0              NaN                 NaN           NaN      NaN          NaN   \n",
              "1              NaN                 NaN           NaN      NaN          NaN   \n",
              "2              NaN                 NaN           NaN      NaN          NaN   \n",
              "3              NaN                 NaN           NaN      NaN          NaN   \n",
              "4              NaN                 NaN           NaN      NaN          NaN   \n",
              "...            ...                 ...           ...      ...          ...   \n",
              "39712          NaN                 NaN           NaN      NaN          NaN   \n",
              "39713          NaN                 NaN           NaN      NaN          NaN   \n",
              "39714          NaN                 NaN           NaN      NaN          NaN   \n",
              "39715          NaN                 NaN           NaN      NaN          NaN   \n",
              "39716          NaN                 NaN           NaN      NaN          NaN   \n",
              "\n",
              "       open_rv_24m  max_bal_bc  all_util  total_rev_hi_lim  inq_fi  \\\n",
              "0              NaN         NaN       NaN               NaN     NaN   \n",
              "1              NaN         NaN       NaN               NaN     NaN   \n",
              "2              NaN         NaN       NaN               NaN     NaN   \n",
              "3              NaN         NaN       NaN               NaN     NaN   \n",
              "4              NaN         NaN       NaN               NaN     NaN   \n",
              "...            ...         ...       ...               ...     ...   \n",
              "39712          NaN         NaN       NaN               NaN     NaN   \n",
              "39713          NaN         NaN       NaN               NaN     NaN   \n",
              "39714          NaN         NaN       NaN               NaN     NaN   \n",
              "39715          NaN         NaN       NaN               NaN     NaN   \n",
              "39716          NaN         NaN       NaN               NaN     NaN   \n",
              "\n",
              "       total_cu_tl  inq_last_12m  acc_open_past_24mths  avg_cur_bal  \\\n",
              "0              NaN           NaN                   NaN          NaN   \n",
              "1              NaN           NaN                   NaN          NaN   \n",
              "2              NaN           NaN                   NaN          NaN   \n",
              "3              NaN           NaN                   NaN          NaN   \n",
              "4              NaN           NaN                   NaN          NaN   \n",
              "...            ...           ...                   ...          ...   \n",
              "39712          NaN           NaN                   NaN          NaN   \n",
              "39713          NaN           NaN                   NaN          NaN   \n",
              "39714          NaN           NaN                   NaN          NaN   \n",
              "39715          NaN           NaN                   NaN          NaN   \n",
              "39716          NaN           NaN                   NaN          NaN   \n",
              "\n",
              "       bc_open_to_buy  bc_util  chargeoff_within_12_mths  delinq_amnt  \\\n",
              "0                 NaN      NaN                       0.0            0   \n",
              "1                 NaN      NaN                       0.0            0   \n",
              "2                 NaN      NaN                       0.0            0   \n",
              "3                 NaN      NaN                       0.0            0   \n",
              "4                 NaN      NaN                       0.0            0   \n",
              "...               ...      ...                       ...          ...   \n",
              "39712             NaN      NaN                       NaN            0   \n",
              "39713             NaN      NaN                       NaN            0   \n",
              "39714             NaN      NaN                       NaN            0   \n",
              "39715             NaN      NaN                       NaN            0   \n",
              "39716             NaN      NaN                       NaN            0   \n",
              "\n",
              "       mo_sin_old_il_acct  mo_sin_old_rev_tl_op  mo_sin_rcnt_rev_tl_op  \\\n",
              "0                     NaN                   NaN                    NaN   \n",
              "1                     NaN                   NaN                    NaN   \n",
              "2                     NaN                   NaN                    NaN   \n",
              "3                     NaN                   NaN                    NaN   \n",
              "4                     NaN                   NaN                    NaN   \n",
              "...                   ...                   ...                    ...   \n",
              "39712                 NaN                   NaN                    NaN   \n",
              "39713                 NaN                   NaN                    NaN   \n",
              "39714                 NaN                   NaN                    NaN   \n",
              "39715                 NaN                   NaN                    NaN   \n",
              "39716                 NaN                   NaN                    NaN   \n",
              "\n",
              "       mo_sin_rcnt_tl  mort_acc  mths_since_recent_bc  \\\n",
              "0                 NaN       NaN                   NaN   \n",
              "1                 NaN       NaN                   NaN   \n",
              "2                 NaN       NaN                   NaN   \n",
              "3                 NaN       NaN                   NaN   \n",
              "4                 NaN       NaN                   NaN   \n",
              "...               ...       ...                   ...   \n",
              "39712             NaN       NaN                   NaN   \n",
              "39713             NaN       NaN                   NaN   \n",
              "39714             NaN       NaN                   NaN   \n",
              "39715             NaN       NaN                   NaN   \n",
              "39716             NaN       NaN                   NaN   \n",
              "\n",
              "       mths_since_recent_bc_dlq  mths_since_recent_inq  \\\n",
              "0                           NaN                    NaN   \n",
              "1                           NaN                    NaN   \n",
              "2                           NaN                    NaN   \n",
              "3                           NaN                    NaN   \n",
              "4                           NaN                    NaN   \n",
              "...                         ...                    ...   \n",
              "39712                       NaN                    NaN   \n",
              "39713                       NaN                    NaN   \n",
              "39714                       NaN                    NaN   \n",
              "39715                       NaN                    NaN   \n",
              "39716                       NaN                    NaN   \n",
              "\n",
              "       mths_since_recent_revol_delinq  num_accts_ever_120_pd  num_actv_bc_tl  \\\n",
              "0                                 NaN                    NaN             NaN   \n",
              "1                                 NaN                    NaN             NaN   \n",
              "2                                 NaN                    NaN             NaN   \n",
              "3                                 NaN                    NaN             NaN   \n",
              "4                                 NaN                    NaN             NaN   \n",
              "...                               ...                    ...             ...   \n",
              "39712                             NaN                    NaN             NaN   \n",
              "39713                             NaN                    NaN             NaN   \n",
              "39714                             NaN                    NaN             NaN   \n",
              "39715                             NaN                    NaN             NaN   \n",
              "39716                             NaN                    NaN             NaN   \n",
              "\n",
              "       num_actv_rev_tl  num_bc_sats  num_bc_tl  num_il_tl  num_op_rev_tl  \\\n",
              "0                  NaN          NaN        NaN        NaN            NaN   \n",
              "1                  NaN          NaN        NaN        NaN            NaN   \n",
              "2                  NaN          NaN        NaN        NaN            NaN   \n",
              "3                  NaN          NaN        NaN        NaN            NaN   \n",
              "4                  NaN          NaN        NaN        NaN            NaN   \n",
              "...                ...          ...        ...        ...            ...   \n",
              "39712              NaN          NaN        NaN        NaN            NaN   \n",
              "39713              NaN          NaN        NaN        NaN            NaN   \n",
              "39714              NaN          NaN        NaN        NaN            NaN   \n",
              "39715              NaN          NaN        NaN        NaN            NaN   \n",
              "39716              NaN          NaN        NaN        NaN            NaN   \n",
              "\n",
              "       num_rev_accts  num_rev_tl_bal_gt_0  num_sats  num_tl_120dpd_2m  \\\n",
              "0                NaN                  NaN       NaN               NaN   \n",
              "1                NaN                  NaN       NaN               NaN   \n",
              "2                NaN                  NaN       NaN               NaN   \n",
              "3                NaN                  NaN       NaN               NaN   \n",
              "4                NaN                  NaN       NaN               NaN   \n",
              "...              ...                  ...       ...               ...   \n",
              "39712            NaN                  NaN       NaN               NaN   \n",
              "39713            NaN                  NaN       NaN               NaN   \n",
              "39714            NaN                  NaN       NaN               NaN   \n",
              "39715            NaN                  NaN       NaN               NaN   \n",
              "39716            NaN                  NaN       NaN               NaN   \n",
              "\n",
              "       num_tl_30dpd  num_tl_90g_dpd_24m  num_tl_op_past_12m  pct_tl_nvr_dlq  \\\n",
              "0               NaN                 NaN                 NaN             NaN   \n",
              "1               NaN                 NaN                 NaN             NaN   \n",
              "2               NaN                 NaN                 NaN             NaN   \n",
              "3               NaN                 NaN                 NaN             NaN   \n",
              "4               NaN                 NaN                 NaN             NaN   \n",
              "...             ...                 ...                 ...             ...   \n",
              "39712           NaN                 NaN                 NaN             NaN   \n",
              "39713           NaN                 NaN                 NaN             NaN   \n",
              "39714           NaN                 NaN                 NaN             NaN   \n",
              "39715           NaN                 NaN                 NaN             NaN   \n",
              "39716           NaN                 NaN                 NaN             NaN   \n",
              "\n",
              "       percent_bc_gt_75  pub_rec_bankruptcies  tax_liens  tot_hi_cred_lim  \\\n",
              "0                   NaN                   0.0        0.0              NaN   \n",
              "1                   NaN                   0.0        0.0              NaN   \n",
              "2                   NaN                   0.0        0.0              NaN   \n",
              "3                   NaN                   0.0        0.0              NaN   \n",
              "4                   NaN                   0.0        0.0              NaN   \n",
              "...                 ...                   ...        ...              ...   \n",
              "39712               NaN                   NaN        NaN              NaN   \n",
              "39713               NaN                   NaN        NaN              NaN   \n",
              "39714               NaN                   NaN        NaN              NaN   \n",
              "39715               NaN                   NaN        NaN              NaN   \n",
              "39716               NaN                   NaN        NaN              NaN   \n",
              "\n",
              "       total_bal_ex_mort  total_bc_limit  total_il_high_credit_limit  \n",
              "0                    NaN             NaN                         NaN  \n",
              "1                    NaN             NaN                         NaN  \n",
              "2                    NaN             NaN                         NaN  \n",
              "3                    NaN             NaN                         NaN  \n",
              "4                    NaN             NaN                         NaN  \n",
              "...                  ...             ...                         ...  \n",
              "39712                NaN             NaN                         NaN  \n",
              "39713                NaN             NaN                         NaN  \n",
              "39714                NaN             NaN                         NaN  \n",
              "39715                NaN             NaN                         NaN  \n",
              "39716                NaN             NaN                         NaN  \n",
              "\n",
              "[39717 rows x 111 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "5-ObnbjAGapv",
        "outputId": "95a7d5d3-d678-426a-ca53-da7d58d75bec"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 id     member_id     loan_amnt   funded_amnt  \\\n",
              "count  3.971700e+04  3.971700e+04  39717.000000  39717.000000   \n",
              "mean   6.831319e+05  8.504636e+05  11219.443815  10947.713196   \n",
              "std    2.106941e+05  2.656783e+05   7456.670694   7187.238670   \n",
              "min    5.473400e+04  7.069900e+04    500.000000    500.000000   \n",
              "25%    5.162210e+05  6.667800e+05   5500.000000   5400.000000   \n",
              "50%    6.656650e+05  8.508120e+05  10000.000000   9600.000000   \n",
              "75%    8.377550e+05  1.047339e+06  15000.000000  15000.000000   \n",
              "max    1.077501e+06  1.314167e+06  35000.000000  35000.000000   \n",
              "\n",
              "       funded_amnt_inv   installment    annual_inc           dti  \\\n",
              "count     39717.000000  39717.000000  3.971700e+04  39717.000000   \n",
              "mean      10397.448868    324.561922  6.896893e+04     13.315130   \n",
              "std        7128.450439    208.874874  6.379377e+04      6.678594   \n",
              "min           0.000000     15.690000  4.000000e+03      0.000000   \n",
              "25%        5000.000000    167.020000  4.040400e+04      8.170000   \n",
              "50%        8975.000000    280.220000  5.900000e+04     13.400000   \n",
              "75%       14400.000000    430.780000  8.230000e+04     18.600000   \n",
              "max       35000.000000   1305.190000  6.000000e+06     29.990000   \n",
              "\n",
              "        delinq_2yrs  inq_last_6mths  mths_since_last_delinq  \\\n",
              "count  39717.000000    39717.000000            14035.000000   \n",
              "mean       0.146512        0.869200               35.900962   \n",
              "std        0.491812        1.070219               22.020060   \n",
              "min        0.000000        0.000000                0.000000   \n",
              "25%        0.000000        0.000000               18.000000   \n",
              "50%        0.000000        1.000000               34.000000   \n",
              "75%        0.000000        1.000000               52.000000   \n",
              "max       11.000000        8.000000              120.000000   \n",
              "\n",
              "       mths_since_last_record      open_acc       pub_rec      revol_bal  \\\n",
              "count             2786.000000  39717.000000  39717.000000   39717.000000   \n",
              "mean                69.698134      9.294408      0.055065   13382.528086   \n",
              "std                 43.822529      4.400282      0.237200   15885.016641   \n",
              "min                  0.000000      2.000000      0.000000       0.000000   \n",
              "25%                 22.000000      6.000000      0.000000    3703.000000   \n",
              "50%                 90.000000      9.000000      0.000000    8850.000000   \n",
              "75%                104.000000     12.000000      0.000000   17058.000000   \n",
              "max                129.000000     44.000000      4.000000  149588.000000   \n",
              "\n",
              "          total_acc     out_prncp  out_prncp_inv   total_pymnt  \\\n",
              "count  39717.000000  39717.000000   39717.000000  39717.000000   \n",
              "mean      22.088828     51.227887      50.989768  12153.596544   \n",
              "std       11.401709    375.172839     373.824457   9042.040766   \n",
              "min        2.000000      0.000000       0.000000      0.000000   \n",
              "25%       13.000000      0.000000       0.000000   5576.930000   \n",
              "50%       20.000000      0.000000       0.000000   9899.640319   \n",
              "75%       29.000000      0.000000       0.000000  16534.433040   \n",
              "max       90.000000   6311.470000    6307.370000  58563.679930   \n",
              "\n",
              "       total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
              "count     39717.000000     39717.000000   39717.000000        39717.000000   \n",
              "mean      11567.149118      9793.348813    2263.663172            1.363015   \n",
              "std        8942.672613      7065.522127    2608.111964            7.289979   \n",
              "min           0.000000         0.000000       0.000000            0.000000   \n",
              "25%        5112.310000      4600.000000     662.180000            0.000000   \n",
              "50%        9287.150000      8000.000000    1348.910000            0.000000   \n",
              "75%       15798.810000     13653.260000    2833.400000            0.000000   \n",
              "max       58563.680000     35000.020000   23563.680000          180.200000   \n",
              "\n",
              "         recoveries  collection_recovery_fee  last_pymnt_amnt  \\\n",
              "count  39717.000000             39717.000000     39717.000000   \n",
              "mean      95.221624                12.406112      2678.826162   \n",
              "std      688.744771               148.671593      4447.136012   \n",
              "min        0.000000                 0.000000         0.000000   \n",
              "25%        0.000000                 0.000000       218.680000   \n",
              "50%        0.000000                 0.000000       546.140000   \n",
              "75%        0.000000                 0.000000      3293.160000   \n",
              "max    29623.350000              7002.190000     36115.200000   \n",
              "\n",
              "       collections_12_mths_ex_med  mths_since_last_major_derog  policy_code  \\\n",
              "count                     39661.0                          0.0      39717.0   \n",
              "mean                          0.0                          NaN          1.0   \n",
              "std                           0.0                          NaN          0.0   \n",
              "min                           0.0                          NaN          1.0   \n",
              "25%                           0.0                          NaN          1.0   \n",
              "50%                           0.0                          NaN          1.0   \n",
              "75%                           0.0                          NaN          1.0   \n",
              "max                           0.0                          NaN          1.0   \n",
              "\n",
              "       annual_inc_joint  dti_joint  verification_status_joint  acc_now_delinq  \\\n",
              "count               0.0        0.0                        0.0         39717.0   \n",
              "mean                NaN        NaN                        NaN             0.0   \n",
              "std                 NaN        NaN                        NaN             0.0   \n",
              "min                 NaN        NaN                        NaN             0.0   \n",
              "25%                 NaN        NaN                        NaN             0.0   \n",
              "50%                 NaN        NaN                        NaN             0.0   \n",
              "75%                 NaN        NaN                        NaN             0.0   \n",
              "max                 NaN        NaN                        NaN             0.0   \n",
              "\n",
              "       tot_coll_amt  tot_cur_bal  open_acc_6m  open_il_6m  open_il_12m  \\\n",
              "count           0.0          0.0          0.0         0.0          0.0   \n",
              "mean            NaN          NaN          NaN         NaN          NaN   \n",
              "std             NaN          NaN          NaN         NaN          NaN   \n",
              "min             NaN          NaN          NaN         NaN          NaN   \n",
              "25%             NaN          NaN          NaN         NaN          NaN   \n",
              "50%             NaN          NaN          NaN         NaN          NaN   \n",
              "75%             NaN          NaN          NaN         NaN          NaN   \n",
              "max             NaN          NaN          NaN         NaN          NaN   \n",
              "\n",
              "       open_il_24m  mths_since_rcnt_il  total_bal_il  il_util  open_rv_12m  \\\n",
              "count          0.0                 0.0           0.0      0.0          0.0   \n",
              "mean           NaN                 NaN           NaN      NaN          NaN   \n",
              "std            NaN                 NaN           NaN      NaN          NaN   \n",
              "min            NaN                 NaN           NaN      NaN          NaN   \n",
              "25%            NaN                 NaN           NaN      NaN          NaN   \n",
              "50%            NaN                 NaN           NaN      NaN          NaN   \n",
              "75%            NaN                 NaN           NaN      NaN          NaN   \n",
              "max            NaN                 NaN           NaN      NaN          NaN   \n",
              "\n",
              "       open_rv_24m  max_bal_bc  all_util  total_rev_hi_lim  inq_fi  \\\n",
              "count          0.0         0.0       0.0               0.0     0.0   \n",
              "mean           NaN         NaN       NaN               NaN     NaN   \n",
              "std            NaN         NaN       NaN               NaN     NaN   \n",
              "min            NaN         NaN       NaN               NaN     NaN   \n",
              "25%            NaN         NaN       NaN               NaN     NaN   \n",
              "50%            NaN         NaN       NaN               NaN     NaN   \n",
              "75%            NaN         NaN       NaN               NaN     NaN   \n",
              "max            NaN         NaN       NaN               NaN     NaN   \n",
              "\n",
              "       total_cu_tl  inq_last_12m  acc_open_past_24mths  avg_cur_bal  \\\n",
              "count          0.0           0.0                   0.0          0.0   \n",
              "mean           NaN           NaN                   NaN          NaN   \n",
              "std            NaN           NaN                   NaN          NaN   \n",
              "min            NaN           NaN                   NaN          NaN   \n",
              "25%            NaN           NaN                   NaN          NaN   \n",
              "50%            NaN           NaN                   NaN          NaN   \n",
              "75%            NaN           NaN                   NaN          NaN   \n",
              "max            NaN           NaN                   NaN          NaN   \n",
              "\n",
              "       bc_open_to_buy  bc_util  chargeoff_within_12_mths  delinq_amnt  \\\n",
              "count             0.0      0.0                   39661.0      39717.0   \n",
              "mean              NaN      NaN                       0.0          0.0   \n",
              "std               NaN      NaN                       0.0          0.0   \n",
              "min               NaN      NaN                       0.0          0.0   \n",
              "25%               NaN      NaN                       0.0          0.0   \n",
              "50%               NaN      NaN                       0.0          0.0   \n",
              "75%               NaN      NaN                       0.0          0.0   \n",
              "max               NaN      NaN                       0.0          0.0   \n",
              "\n",
              "       mo_sin_old_il_acct  mo_sin_old_rev_tl_op  mo_sin_rcnt_rev_tl_op  \\\n",
              "count                 0.0                   0.0                    0.0   \n",
              "mean                  NaN                   NaN                    NaN   \n",
              "std                   NaN                   NaN                    NaN   \n",
              "min                   NaN                   NaN                    NaN   \n",
              "25%                   NaN                   NaN                    NaN   \n",
              "50%                   NaN                   NaN                    NaN   \n",
              "75%                   NaN                   NaN                    NaN   \n",
              "max                   NaN                   NaN                    NaN   \n",
              "\n",
              "       mo_sin_rcnt_tl  mort_acc  mths_since_recent_bc  \\\n",
              "count             0.0       0.0                   0.0   \n",
              "mean              NaN       NaN                   NaN   \n",
              "std               NaN       NaN                   NaN   \n",
              "min               NaN       NaN                   NaN   \n",
              "25%               NaN       NaN                   NaN   \n",
              "50%               NaN       NaN                   NaN   \n",
              "75%               NaN       NaN                   NaN   \n",
              "max               NaN       NaN                   NaN   \n",
              "\n",
              "       mths_since_recent_bc_dlq  mths_since_recent_inq  \\\n",
              "count                       0.0                    0.0   \n",
              "mean                        NaN                    NaN   \n",
              "std                         NaN                    NaN   \n",
              "min                         NaN                    NaN   \n",
              "25%                         NaN                    NaN   \n",
              "50%                         NaN                    NaN   \n",
              "75%                         NaN                    NaN   \n",
              "max                         NaN                    NaN   \n",
              "\n",
              "       mths_since_recent_revol_delinq  num_accts_ever_120_pd  num_actv_bc_tl  \\\n",
              "count                             0.0                    0.0             0.0   \n",
              "mean                              NaN                    NaN             NaN   \n",
              "std                               NaN                    NaN             NaN   \n",
              "min                               NaN                    NaN             NaN   \n",
              "25%                               NaN                    NaN             NaN   \n",
              "50%                               NaN                    NaN             NaN   \n",
              "75%                               NaN                    NaN             NaN   \n",
              "max                               NaN                    NaN             NaN   \n",
              "\n",
              "       num_actv_rev_tl  num_bc_sats  num_bc_tl  num_il_tl  num_op_rev_tl  \\\n",
              "count              0.0          0.0        0.0        0.0            0.0   \n",
              "mean               NaN          NaN        NaN        NaN            NaN   \n",
              "std                NaN          NaN        NaN        NaN            NaN   \n",
              "min                NaN          NaN        NaN        NaN            NaN   \n",
              "25%                NaN          NaN        NaN        NaN            NaN   \n",
              "50%                NaN          NaN        NaN        NaN            NaN   \n",
              "75%                NaN          NaN        NaN        NaN            NaN   \n",
              "max                NaN          NaN        NaN        NaN            NaN   \n",
              "\n",
              "       num_rev_accts  num_rev_tl_bal_gt_0  num_sats  num_tl_120dpd_2m  \\\n",
              "count            0.0                  0.0       0.0               0.0   \n",
              "mean             NaN                  NaN       NaN               NaN   \n",
              "std              NaN                  NaN       NaN               NaN   \n",
              "min              NaN                  NaN       NaN               NaN   \n",
              "25%              NaN                  NaN       NaN               NaN   \n",
              "50%              NaN                  NaN       NaN               NaN   \n",
              "75%              NaN                  NaN       NaN               NaN   \n",
              "max              NaN                  NaN       NaN               NaN   \n",
              "\n",
              "       num_tl_30dpd  num_tl_90g_dpd_24m  num_tl_op_past_12m  pct_tl_nvr_dlq  \\\n",
              "count           0.0                 0.0                 0.0             0.0   \n",
              "mean            NaN                 NaN                 NaN             NaN   \n",
              "std             NaN                 NaN                 NaN             NaN   \n",
              "min             NaN                 NaN                 NaN             NaN   \n",
              "25%             NaN                 NaN                 NaN             NaN   \n",
              "50%             NaN                 NaN                 NaN             NaN   \n",
              "75%             NaN                 NaN                 NaN             NaN   \n",
              "max             NaN                 NaN                 NaN             NaN   \n",
              "\n",
              "       percent_bc_gt_75  pub_rec_bankruptcies  tax_liens  tot_hi_cred_lim  \\\n",
              "count               0.0          39020.000000    39678.0              0.0   \n",
              "mean                NaN              0.043260        0.0              NaN   \n",
              "std                 NaN              0.204324        0.0              NaN   \n",
              "min                 NaN              0.000000        0.0              NaN   \n",
              "25%                 NaN              0.000000        0.0              NaN   \n",
              "50%                 NaN              0.000000        0.0              NaN   \n",
              "75%                 NaN              0.000000        0.0              NaN   \n",
              "max                 NaN              2.000000        0.0              NaN   \n",
              "\n",
              "       total_bal_ex_mort  total_bc_limit  total_il_high_credit_limit  \n",
              "count                0.0             0.0                         0.0  \n",
              "mean                 NaN             NaN                         NaN  \n",
              "std                  NaN             NaN                         NaN  \n",
              "min                  NaN             NaN                         NaN  \n",
              "25%                  NaN             NaN                         NaN  \n",
              "50%                  NaN             NaN                         NaN  \n",
              "75%                  NaN             NaN                         NaN  \n",
              "max                  NaN             NaN                         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d3728b9-c922-40e9-a70f-7954f53f93db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>member_id</th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>funded_amnt_inv</th>\n",
              "      <th>installment</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <th>mths_since_last_delinq</th>\n",
              "      <th>mths_since_last_record</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>out_prncp</th>\n",
              "      <th>out_prncp_inv</th>\n",
              "      <th>total_pymnt</th>\n",
              "      <th>total_pymnt_inv</th>\n",
              "      <th>total_rec_prncp</th>\n",
              "      <th>total_rec_int</th>\n",
              "      <th>total_rec_late_fee</th>\n",
              "      <th>recoveries</th>\n",
              "      <th>collection_recovery_fee</th>\n",
              "      <th>last_pymnt_amnt</th>\n",
              "      <th>collections_12_mths_ex_med</th>\n",
              "      <th>mths_since_last_major_derog</th>\n",
              "      <th>policy_code</th>\n",
              "      <th>annual_inc_joint</th>\n",
              "      <th>dti_joint</th>\n",
              "      <th>verification_status_joint</th>\n",
              "      <th>acc_now_delinq</th>\n",
              "      <th>tot_coll_amt</th>\n",
              "      <th>tot_cur_bal</th>\n",
              "      <th>open_acc_6m</th>\n",
              "      <th>open_il_6m</th>\n",
              "      <th>open_il_12m</th>\n",
              "      <th>open_il_24m</th>\n",
              "      <th>mths_since_rcnt_il</th>\n",
              "      <th>total_bal_il</th>\n",
              "      <th>il_util</th>\n",
              "      <th>open_rv_12m</th>\n",
              "      <th>open_rv_24m</th>\n",
              "      <th>max_bal_bc</th>\n",
              "      <th>all_util</th>\n",
              "      <th>total_rev_hi_lim</th>\n",
              "      <th>inq_fi</th>\n",
              "      <th>total_cu_tl</th>\n",
              "      <th>inq_last_12m</th>\n",
              "      <th>acc_open_past_24mths</th>\n",
              "      <th>avg_cur_bal</th>\n",
              "      <th>bc_open_to_buy</th>\n",
              "      <th>bc_util</th>\n",
              "      <th>chargeoff_within_12_mths</th>\n",
              "      <th>delinq_amnt</th>\n",
              "      <th>mo_sin_old_il_acct</th>\n",
              "      <th>mo_sin_old_rev_tl_op</th>\n",
              "      <th>mo_sin_rcnt_rev_tl_op</th>\n",
              "      <th>mo_sin_rcnt_tl</th>\n",
              "      <th>mort_acc</th>\n",
              "      <th>mths_since_recent_bc</th>\n",
              "      <th>mths_since_recent_bc_dlq</th>\n",
              "      <th>mths_since_recent_inq</th>\n",
              "      <th>mths_since_recent_revol_delinq</th>\n",
              "      <th>num_accts_ever_120_pd</th>\n",
              "      <th>num_actv_bc_tl</th>\n",
              "      <th>num_actv_rev_tl</th>\n",
              "      <th>num_bc_sats</th>\n",
              "      <th>num_bc_tl</th>\n",
              "      <th>num_il_tl</th>\n",
              "      <th>num_op_rev_tl</th>\n",
              "      <th>num_rev_accts</th>\n",
              "      <th>num_rev_tl_bal_gt_0</th>\n",
              "      <th>num_sats</th>\n",
              "      <th>num_tl_120dpd_2m</th>\n",
              "      <th>num_tl_30dpd</th>\n",
              "      <th>num_tl_90g_dpd_24m</th>\n",
              "      <th>num_tl_op_past_12m</th>\n",
              "      <th>pct_tl_nvr_dlq</th>\n",
              "      <th>percent_bc_gt_75</th>\n",
              "      <th>pub_rec_bankruptcies</th>\n",
              "      <th>tax_liens</th>\n",
              "      <th>tot_hi_cred_lim</th>\n",
              "      <th>total_bal_ex_mort</th>\n",
              "      <th>total_bc_limit</th>\n",
              "      <th>total_il_high_credit_limit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>14035.000000</td>\n",
              "      <td>2786.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39020.000000</td>\n",
              "      <td>39678.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.831319e+05</td>\n",
              "      <td>8.504636e+05</td>\n",
              "      <td>11219.443815</td>\n",
              "      <td>10947.713196</td>\n",
              "      <td>10397.448868</td>\n",
              "      <td>324.561922</td>\n",
              "      <td>6.896893e+04</td>\n",
              "      <td>13.315130</td>\n",
              "      <td>0.146512</td>\n",
              "      <td>0.869200</td>\n",
              "      <td>35.900962</td>\n",
              "      <td>69.698134</td>\n",
              "      <td>9.294408</td>\n",
              "      <td>0.055065</td>\n",
              "      <td>13382.528086</td>\n",
              "      <td>22.088828</td>\n",
              "      <td>51.227887</td>\n",
              "      <td>50.989768</td>\n",
              "      <td>12153.596544</td>\n",
              "      <td>11567.149118</td>\n",
              "      <td>9793.348813</td>\n",
              "      <td>2263.663172</td>\n",
              "      <td>1.363015</td>\n",
              "      <td>95.221624</td>\n",
              "      <td>12.406112</td>\n",
              "      <td>2678.826162</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.043260</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.106941e+05</td>\n",
              "      <td>2.656783e+05</td>\n",
              "      <td>7456.670694</td>\n",
              "      <td>7187.238670</td>\n",
              "      <td>7128.450439</td>\n",
              "      <td>208.874874</td>\n",
              "      <td>6.379377e+04</td>\n",
              "      <td>6.678594</td>\n",
              "      <td>0.491812</td>\n",
              "      <td>1.070219</td>\n",
              "      <td>22.020060</td>\n",
              "      <td>43.822529</td>\n",
              "      <td>4.400282</td>\n",
              "      <td>0.237200</td>\n",
              "      <td>15885.016641</td>\n",
              "      <td>11.401709</td>\n",
              "      <td>375.172839</td>\n",
              "      <td>373.824457</td>\n",
              "      <td>9042.040766</td>\n",
              "      <td>8942.672613</td>\n",
              "      <td>7065.522127</td>\n",
              "      <td>2608.111964</td>\n",
              "      <td>7.289979</td>\n",
              "      <td>688.744771</td>\n",
              "      <td>148.671593</td>\n",
              "      <td>4447.136012</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.204324</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.473400e+04</td>\n",
              "      <td>7.069900e+04</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>15.690000</td>\n",
              "      <td>4.000000e+03</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.162210e+05</td>\n",
              "      <td>6.667800e+05</td>\n",
              "      <td>5500.000000</td>\n",
              "      <td>5400.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>167.020000</td>\n",
              "      <td>4.040400e+04</td>\n",
              "      <td>8.170000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3703.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5576.930000</td>\n",
              "      <td>5112.310000</td>\n",
              "      <td>4600.000000</td>\n",
              "      <td>662.180000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>218.680000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.656650e+05</td>\n",
              "      <td>8.508120e+05</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>9600.000000</td>\n",
              "      <td>8975.000000</td>\n",
              "      <td>280.220000</td>\n",
              "      <td>5.900000e+04</td>\n",
              "      <td>13.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8850.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9899.640319</td>\n",
              "      <td>9287.150000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>1348.910000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>546.140000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.377550e+05</td>\n",
              "      <td>1.047339e+06</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>14400.000000</td>\n",
              "      <td>430.780000</td>\n",
              "      <td>8.230000e+04</td>\n",
              "      <td>18.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>17058.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16534.433040</td>\n",
              "      <td>15798.810000</td>\n",
              "      <td>13653.260000</td>\n",
              "      <td>2833.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3293.160000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.077501e+06</td>\n",
              "      <td>1.314167e+06</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>1305.190000</td>\n",
              "      <td>6.000000e+06</td>\n",
              "      <td>29.990000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>149588.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>6311.470000</td>\n",
              "      <td>6307.370000</td>\n",
              "      <td>58563.679930</td>\n",
              "      <td>58563.680000</td>\n",
              "      <td>35000.020000</td>\n",
              "      <td>23563.680000</td>\n",
              "      <td>180.200000</td>\n",
              "      <td>29623.350000</td>\n",
              "      <td>7002.190000</td>\n",
              "      <td>36115.200000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d3728b9-c922-40e9-a70f-7954f53f93db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6d3728b9-c922-40e9-a70f-7954f53f93db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6d3728b9-c922-40e9-a70f-7954f53f93db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are many columns with all Values as NaN. Having them for analysis, does not add any Values. So droping all the columns"
      ],
      "metadata": {
        "id": "6OGxG5rSGst0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.dropna(inplace = True, how ='all', axis = 1)"
      ],
      "metadata": {
        "id": "rhodHf56HAPZ"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "numLlkP3HI42",
        "outputId": "71c1b356-68b1-472e-96b5-ee5a19163eb7"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 id     member_id     loan_amnt   funded_amnt  \\\n",
              "count  3.971700e+04  3.971700e+04  39717.000000  39717.000000   \n",
              "mean   6.831319e+05  8.504636e+05  11219.443815  10947.713196   \n",
              "std    2.106941e+05  2.656783e+05   7456.670694   7187.238670   \n",
              "min    5.473400e+04  7.069900e+04    500.000000    500.000000   \n",
              "25%    5.162210e+05  6.667800e+05   5500.000000   5400.000000   \n",
              "50%    6.656650e+05  8.508120e+05  10000.000000   9600.000000   \n",
              "75%    8.377550e+05  1.047339e+06  15000.000000  15000.000000   \n",
              "max    1.077501e+06  1.314167e+06  35000.000000  35000.000000   \n",
              "\n",
              "       funded_amnt_inv   installment    annual_inc           dti  \\\n",
              "count     39717.000000  39717.000000  3.971700e+04  39717.000000   \n",
              "mean      10397.448868    324.561922  6.896893e+04     13.315130   \n",
              "std        7128.450439    208.874874  6.379377e+04      6.678594   \n",
              "min           0.000000     15.690000  4.000000e+03      0.000000   \n",
              "25%        5000.000000    167.020000  4.040400e+04      8.170000   \n",
              "50%        8975.000000    280.220000  5.900000e+04     13.400000   \n",
              "75%       14400.000000    430.780000  8.230000e+04     18.600000   \n",
              "max       35000.000000   1305.190000  6.000000e+06     29.990000   \n",
              "\n",
              "        delinq_2yrs  inq_last_6mths  mths_since_last_delinq  \\\n",
              "count  39717.000000    39717.000000            14035.000000   \n",
              "mean       0.146512        0.869200               35.900962   \n",
              "std        0.491812        1.070219               22.020060   \n",
              "min        0.000000        0.000000                0.000000   \n",
              "25%        0.000000        0.000000               18.000000   \n",
              "50%        0.000000        1.000000               34.000000   \n",
              "75%        0.000000        1.000000               52.000000   \n",
              "max       11.000000        8.000000              120.000000   \n",
              "\n",
              "       mths_since_last_record      open_acc       pub_rec      revol_bal  \\\n",
              "count             2786.000000  39717.000000  39717.000000   39717.000000   \n",
              "mean                69.698134      9.294408      0.055065   13382.528086   \n",
              "std                 43.822529      4.400282      0.237200   15885.016641   \n",
              "min                  0.000000      2.000000      0.000000       0.000000   \n",
              "25%                 22.000000      6.000000      0.000000    3703.000000   \n",
              "50%                 90.000000      9.000000      0.000000    8850.000000   \n",
              "75%                104.000000     12.000000      0.000000   17058.000000   \n",
              "max                129.000000     44.000000      4.000000  149588.000000   \n",
              "\n",
              "          total_acc     out_prncp  out_prncp_inv   total_pymnt  \\\n",
              "count  39717.000000  39717.000000   39717.000000  39717.000000   \n",
              "mean      22.088828     51.227887      50.989768  12153.596544   \n",
              "std       11.401709    375.172839     373.824457   9042.040766   \n",
              "min        2.000000      0.000000       0.000000      0.000000   \n",
              "25%       13.000000      0.000000       0.000000   5576.930000   \n",
              "50%       20.000000      0.000000       0.000000   9899.640319   \n",
              "75%       29.000000      0.000000       0.000000  16534.433040   \n",
              "max       90.000000   6311.470000    6307.370000  58563.679930   \n",
              "\n",
              "       total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
              "count     39717.000000     39717.000000   39717.000000        39717.000000   \n",
              "mean      11567.149118      9793.348813    2263.663172            1.363015   \n",
              "std        8942.672613      7065.522127    2608.111964            7.289979   \n",
              "min           0.000000         0.000000       0.000000            0.000000   \n",
              "25%        5112.310000      4600.000000     662.180000            0.000000   \n",
              "50%        9287.150000      8000.000000    1348.910000            0.000000   \n",
              "75%       15798.810000     13653.260000    2833.400000            0.000000   \n",
              "max       58563.680000     35000.020000   23563.680000          180.200000   \n",
              "\n",
              "         recoveries  collection_recovery_fee  last_pymnt_amnt  \\\n",
              "count  39717.000000             39717.000000     39717.000000   \n",
              "mean      95.221624                12.406112      2678.826162   \n",
              "std      688.744771               148.671593      4447.136012   \n",
              "min        0.000000                 0.000000         0.000000   \n",
              "25%        0.000000                 0.000000       218.680000   \n",
              "50%        0.000000                 0.000000       546.140000   \n",
              "75%        0.000000                 0.000000      3293.160000   \n",
              "max    29623.350000              7002.190000     36115.200000   \n",
              "\n",
              "       collections_12_mths_ex_med  policy_code  acc_now_delinq  \\\n",
              "count                     39661.0      39717.0         39717.0   \n",
              "mean                          0.0          1.0             0.0   \n",
              "std                           0.0          0.0             0.0   \n",
              "min                           0.0          1.0             0.0   \n",
              "25%                           0.0          1.0             0.0   \n",
              "50%                           0.0          1.0             0.0   \n",
              "75%                           0.0          1.0             0.0   \n",
              "max                           0.0          1.0             0.0   \n",
              "\n",
              "       chargeoff_within_12_mths  delinq_amnt  pub_rec_bankruptcies  tax_liens  \n",
              "count                   39661.0      39717.0          39020.000000    39678.0  \n",
              "mean                        0.0          0.0              0.043260        0.0  \n",
              "std                         0.0          0.0              0.204324        0.0  \n",
              "min                         0.0          0.0              0.000000        0.0  \n",
              "25%                         0.0          0.0              0.000000        0.0  \n",
              "50%                         0.0          0.0              0.000000        0.0  \n",
              "75%                         0.0          0.0              0.000000        0.0  \n",
              "max                         0.0          0.0              2.000000        0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-73e94ed1-2a2f-4f56-b660-3645c01b8dd6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>member_id</th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>funded_amnt_inv</th>\n",
              "      <th>installment</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <th>mths_since_last_delinq</th>\n",
              "      <th>mths_since_last_record</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>out_prncp</th>\n",
              "      <th>out_prncp_inv</th>\n",
              "      <th>total_pymnt</th>\n",
              "      <th>total_pymnt_inv</th>\n",
              "      <th>total_rec_prncp</th>\n",
              "      <th>total_rec_int</th>\n",
              "      <th>total_rec_late_fee</th>\n",
              "      <th>recoveries</th>\n",
              "      <th>collection_recovery_fee</th>\n",
              "      <th>last_pymnt_amnt</th>\n",
              "      <th>collections_12_mths_ex_med</th>\n",
              "      <th>policy_code</th>\n",
              "      <th>acc_now_delinq</th>\n",
              "      <th>chargeoff_within_12_mths</th>\n",
              "      <th>delinq_amnt</th>\n",
              "      <th>pub_rec_bankruptcies</th>\n",
              "      <th>tax_liens</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>14035.000000</td>\n",
              "      <td>2786.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39020.000000</td>\n",
              "      <td>39678.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.831319e+05</td>\n",
              "      <td>8.504636e+05</td>\n",
              "      <td>11219.443815</td>\n",
              "      <td>10947.713196</td>\n",
              "      <td>10397.448868</td>\n",
              "      <td>324.561922</td>\n",
              "      <td>6.896893e+04</td>\n",
              "      <td>13.315130</td>\n",
              "      <td>0.146512</td>\n",
              "      <td>0.869200</td>\n",
              "      <td>35.900962</td>\n",
              "      <td>69.698134</td>\n",
              "      <td>9.294408</td>\n",
              "      <td>0.055065</td>\n",
              "      <td>13382.528086</td>\n",
              "      <td>22.088828</td>\n",
              "      <td>51.227887</td>\n",
              "      <td>50.989768</td>\n",
              "      <td>12153.596544</td>\n",
              "      <td>11567.149118</td>\n",
              "      <td>9793.348813</td>\n",
              "      <td>2263.663172</td>\n",
              "      <td>1.363015</td>\n",
              "      <td>95.221624</td>\n",
              "      <td>12.406112</td>\n",
              "      <td>2678.826162</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.043260</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.106941e+05</td>\n",
              "      <td>2.656783e+05</td>\n",
              "      <td>7456.670694</td>\n",
              "      <td>7187.238670</td>\n",
              "      <td>7128.450439</td>\n",
              "      <td>208.874874</td>\n",
              "      <td>6.379377e+04</td>\n",
              "      <td>6.678594</td>\n",
              "      <td>0.491812</td>\n",
              "      <td>1.070219</td>\n",
              "      <td>22.020060</td>\n",
              "      <td>43.822529</td>\n",
              "      <td>4.400282</td>\n",
              "      <td>0.237200</td>\n",
              "      <td>15885.016641</td>\n",
              "      <td>11.401709</td>\n",
              "      <td>375.172839</td>\n",
              "      <td>373.824457</td>\n",
              "      <td>9042.040766</td>\n",
              "      <td>8942.672613</td>\n",
              "      <td>7065.522127</td>\n",
              "      <td>2608.111964</td>\n",
              "      <td>7.289979</td>\n",
              "      <td>688.744771</td>\n",
              "      <td>148.671593</td>\n",
              "      <td>4447.136012</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.204324</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.473400e+04</td>\n",
              "      <td>7.069900e+04</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>15.690000</td>\n",
              "      <td>4.000000e+03</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.162210e+05</td>\n",
              "      <td>6.667800e+05</td>\n",
              "      <td>5500.000000</td>\n",
              "      <td>5400.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>167.020000</td>\n",
              "      <td>4.040400e+04</td>\n",
              "      <td>8.170000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3703.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5576.930000</td>\n",
              "      <td>5112.310000</td>\n",
              "      <td>4600.000000</td>\n",
              "      <td>662.180000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>218.680000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.656650e+05</td>\n",
              "      <td>8.508120e+05</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>9600.000000</td>\n",
              "      <td>8975.000000</td>\n",
              "      <td>280.220000</td>\n",
              "      <td>5.900000e+04</td>\n",
              "      <td>13.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8850.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9899.640319</td>\n",
              "      <td>9287.150000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>1348.910000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>546.140000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.377550e+05</td>\n",
              "      <td>1.047339e+06</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>14400.000000</td>\n",
              "      <td>430.780000</td>\n",
              "      <td>8.230000e+04</td>\n",
              "      <td>18.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>17058.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16534.433040</td>\n",
              "      <td>15798.810000</td>\n",
              "      <td>13653.260000</td>\n",
              "      <td>2833.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3293.160000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.077501e+06</td>\n",
              "      <td>1.314167e+06</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>1305.190000</td>\n",
              "      <td>6.000000e+06</td>\n",
              "      <td>29.990000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>149588.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>6311.470000</td>\n",
              "      <td>6307.370000</td>\n",
              "      <td>58563.679930</td>\n",
              "      <td>58563.680000</td>\n",
              "      <td>35000.020000</td>\n",
              "      <td>23563.680000</td>\n",
              "      <td>180.200000</td>\n",
              "      <td>29623.350000</td>\n",
              "      <td>7002.190000</td>\n",
              "      <td>36115.200000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73e94ed1-2a2f-4f56-b660-3645c01b8dd6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-73e94ed1-2a2f-4f56-b660-3645c01b8dd6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-73e94ed1-2a2f-4f56-b660-3645c01b8dd6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "member_id, id column is of no information. So dropping it."
      ],
      "metadata": {
        "id": "ii-EXwjZH_ti"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.drop(['id','member_id'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "O9BsCEVaHJWV"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "2hnsqbEpINtl",
        "outputId": "cc1001d4-cd77-4d5b-ae0d-3f7e6a7d2a6d"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          loan_amnt   funded_amnt  funded_amnt_inv   installment  \\\n",
              "count  39717.000000  39717.000000     39717.000000  39717.000000   \n",
              "mean   11219.443815  10947.713196     10397.448868    324.561922   \n",
              "std     7456.670694   7187.238670      7128.450439    208.874874   \n",
              "min      500.000000    500.000000         0.000000     15.690000   \n",
              "25%     5500.000000   5400.000000      5000.000000    167.020000   \n",
              "50%    10000.000000   9600.000000      8975.000000    280.220000   \n",
              "75%    15000.000000  15000.000000     14400.000000    430.780000   \n",
              "max    35000.000000  35000.000000     35000.000000   1305.190000   \n",
              "\n",
              "         annual_inc           dti   delinq_2yrs  inq_last_6mths  \\\n",
              "count  3.971700e+04  39717.000000  39717.000000    39717.000000   \n",
              "mean   6.896893e+04     13.315130      0.146512        0.869200   \n",
              "std    6.379377e+04      6.678594      0.491812        1.070219   \n",
              "min    4.000000e+03      0.000000      0.000000        0.000000   \n",
              "25%    4.040400e+04      8.170000      0.000000        0.000000   \n",
              "50%    5.900000e+04     13.400000      0.000000        1.000000   \n",
              "75%    8.230000e+04     18.600000      0.000000        1.000000   \n",
              "max    6.000000e+06     29.990000     11.000000        8.000000   \n",
              "\n",
              "       mths_since_last_delinq  mths_since_last_record      open_acc  \\\n",
              "count            14035.000000             2786.000000  39717.000000   \n",
              "mean                35.900962               69.698134      9.294408   \n",
              "std                 22.020060               43.822529      4.400282   \n",
              "min                  0.000000                0.000000      2.000000   \n",
              "25%                 18.000000               22.000000      6.000000   \n",
              "50%                 34.000000               90.000000      9.000000   \n",
              "75%                 52.000000              104.000000     12.000000   \n",
              "max                120.000000              129.000000     44.000000   \n",
              "\n",
              "            pub_rec      revol_bal     total_acc     out_prncp  out_prncp_inv  \\\n",
              "count  39717.000000   39717.000000  39717.000000  39717.000000   39717.000000   \n",
              "mean       0.055065   13382.528086     22.088828     51.227887      50.989768   \n",
              "std        0.237200   15885.016641     11.401709    375.172839     373.824457   \n",
              "min        0.000000       0.000000      2.000000      0.000000       0.000000   \n",
              "25%        0.000000    3703.000000     13.000000      0.000000       0.000000   \n",
              "50%        0.000000    8850.000000     20.000000      0.000000       0.000000   \n",
              "75%        0.000000   17058.000000     29.000000      0.000000       0.000000   \n",
              "max        4.000000  149588.000000     90.000000   6311.470000    6307.370000   \n",
              "\n",
              "        total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  \\\n",
              "count  39717.000000     39717.000000     39717.000000   39717.000000   \n",
              "mean   12153.596544     11567.149118      9793.348813    2263.663172   \n",
              "std     9042.040766      8942.672613      7065.522127    2608.111964   \n",
              "min        0.000000         0.000000         0.000000       0.000000   \n",
              "25%     5576.930000      5112.310000      4600.000000     662.180000   \n",
              "50%     9899.640319      9287.150000      8000.000000    1348.910000   \n",
              "75%    16534.433040     15798.810000     13653.260000    2833.400000   \n",
              "max    58563.679930     58563.680000     35000.020000   23563.680000   \n",
              "\n",
              "       total_rec_late_fee    recoveries  collection_recovery_fee  \\\n",
              "count        39717.000000  39717.000000             39717.000000   \n",
              "mean             1.363015     95.221624                12.406112   \n",
              "std              7.289979    688.744771               148.671593   \n",
              "min              0.000000      0.000000                 0.000000   \n",
              "25%              0.000000      0.000000                 0.000000   \n",
              "50%              0.000000      0.000000                 0.000000   \n",
              "75%              0.000000      0.000000                 0.000000   \n",
              "max            180.200000  29623.350000              7002.190000   \n",
              "\n",
              "       last_pymnt_amnt  collections_12_mths_ex_med  policy_code  \\\n",
              "count     39717.000000                     39661.0      39717.0   \n",
              "mean       2678.826162                         0.0          1.0   \n",
              "std        4447.136012                         0.0          0.0   \n",
              "min           0.000000                         0.0          1.0   \n",
              "25%         218.680000                         0.0          1.0   \n",
              "50%         546.140000                         0.0          1.0   \n",
              "75%        3293.160000                         0.0          1.0   \n",
              "max       36115.200000                         0.0          1.0   \n",
              "\n",
              "       acc_now_delinq  chargeoff_within_12_mths  delinq_amnt  \\\n",
              "count         39717.0                   39661.0      39717.0   \n",
              "mean              0.0                       0.0          0.0   \n",
              "std               0.0                       0.0          0.0   \n",
              "min               0.0                       0.0          0.0   \n",
              "25%               0.0                       0.0          0.0   \n",
              "50%               0.0                       0.0          0.0   \n",
              "75%               0.0                       0.0          0.0   \n",
              "max               0.0                       0.0          0.0   \n",
              "\n",
              "       pub_rec_bankruptcies  tax_liens  \n",
              "count          39020.000000    39678.0  \n",
              "mean               0.043260        0.0  \n",
              "std                0.204324        0.0  \n",
              "min                0.000000        0.0  \n",
              "25%                0.000000        0.0  \n",
              "50%                0.000000        0.0  \n",
              "75%                0.000000        0.0  \n",
              "max                2.000000        0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64887e6d-d154-4ec5-9457-8457d9962613\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>loan_amnt</th>\n",
              "      <th>funded_amnt</th>\n",
              "      <th>funded_amnt_inv</th>\n",
              "      <th>installment</th>\n",
              "      <th>annual_inc</th>\n",
              "      <th>dti</th>\n",
              "      <th>delinq_2yrs</th>\n",
              "      <th>inq_last_6mths</th>\n",
              "      <th>mths_since_last_delinq</th>\n",
              "      <th>mths_since_last_record</th>\n",
              "      <th>open_acc</th>\n",
              "      <th>pub_rec</th>\n",
              "      <th>revol_bal</th>\n",
              "      <th>total_acc</th>\n",
              "      <th>out_prncp</th>\n",
              "      <th>out_prncp_inv</th>\n",
              "      <th>total_pymnt</th>\n",
              "      <th>total_pymnt_inv</th>\n",
              "      <th>total_rec_prncp</th>\n",
              "      <th>total_rec_int</th>\n",
              "      <th>total_rec_late_fee</th>\n",
              "      <th>recoveries</th>\n",
              "      <th>collection_recovery_fee</th>\n",
              "      <th>last_pymnt_amnt</th>\n",
              "      <th>collections_12_mths_ex_med</th>\n",
              "      <th>policy_code</th>\n",
              "      <th>acc_now_delinq</th>\n",
              "      <th>chargeoff_within_12_mths</th>\n",
              "      <th>delinq_amnt</th>\n",
              "      <th>pub_rec_bankruptcies</th>\n",
              "      <th>tax_liens</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>3.971700e+04</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>14035.000000</td>\n",
              "      <td>2786.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39717.000000</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39661.0</td>\n",
              "      <td>39717.0</td>\n",
              "      <td>39020.000000</td>\n",
              "      <td>39678.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>11219.443815</td>\n",
              "      <td>10947.713196</td>\n",
              "      <td>10397.448868</td>\n",
              "      <td>324.561922</td>\n",
              "      <td>6.896893e+04</td>\n",
              "      <td>13.315130</td>\n",
              "      <td>0.146512</td>\n",
              "      <td>0.869200</td>\n",
              "      <td>35.900962</td>\n",
              "      <td>69.698134</td>\n",
              "      <td>9.294408</td>\n",
              "      <td>0.055065</td>\n",
              "      <td>13382.528086</td>\n",
              "      <td>22.088828</td>\n",
              "      <td>51.227887</td>\n",
              "      <td>50.989768</td>\n",
              "      <td>12153.596544</td>\n",
              "      <td>11567.149118</td>\n",
              "      <td>9793.348813</td>\n",
              "      <td>2263.663172</td>\n",
              "      <td>1.363015</td>\n",
              "      <td>95.221624</td>\n",
              "      <td>12.406112</td>\n",
              "      <td>2678.826162</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.043260</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7456.670694</td>\n",
              "      <td>7187.238670</td>\n",
              "      <td>7128.450439</td>\n",
              "      <td>208.874874</td>\n",
              "      <td>6.379377e+04</td>\n",
              "      <td>6.678594</td>\n",
              "      <td>0.491812</td>\n",
              "      <td>1.070219</td>\n",
              "      <td>22.020060</td>\n",
              "      <td>43.822529</td>\n",
              "      <td>4.400282</td>\n",
              "      <td>0.237200</td>\n",
              "      <td>15885.016641</td>\n",
              "      <td>11.401709</td>\n",
              "      <td>375.172839</td>\n",
              "      <td>373.824457</td>\n",
              "      <td>9042.040766</td>\n",
              "      <td>8942.672613</td>\n",
              "      <td>7065.522127</td>\n",
              "      <td>2608.111964</td>\n",
              "      <td>7.289979</td>\n",
              "      <td>688.744771</td>\n",
              "      <td>148.671593</td>\n",
              "      <td>4447.136012</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.204324</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>500.000000</td>\n",
              "      <td>500.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>15.690000</td>\n",
              "      <td>4.000000e+03</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5500.000000</td>\n",
              "      <td>5400.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>167.020000</td>\n",
              "      <td>4.040400e+04</td>\n",
              "      <td>8.170000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3703.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5576.930000</td>\n",
              "      <td>5112.310000</td>\n",
              "      <td>4600.000000</td>\n",
              "      <td>662.180000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>218.680000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>9600.000000</td>\n",
              "      <td>8975.000000</td>\n",
              "      <td>280.220000</td>\n",
              "      <td>5.900000e+04</td>\n",
              "      <td>13.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8850.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9899.640319</td>\n",
              "      <td>9287.150000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>1348.910000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>546.140000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15000.000000</td>\n",
              "      <td>15000.000000</td>\n",
              "      <td>14400.000000</td>\n",
              "      <td>430.780000</td>\n",
              "      <td>8.230000e+04</td>\n",
              "      <td>18.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>17058.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16534.433040</td>\n",
              "      <td>15798.810000</td>\n",
              "      <td>13653.260000</td>\n",
              "      <td>2833.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3293.160000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>35000.000000</td>\n",
              "      <td>1305.190000</td>\n",
              "      <td>6.000000e+06</td>\n",
              "      <td>29.990000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>149588.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>6311.470000</td>\n",
              "      <td>6307.370000</td>\n",
              "      <td>58563.679930</td>\n",
              "      <td>58563.680000</td>\n",
              "      <td>35000.020000</td>\n",
              "      <td>23563.680000</td>\n",
              "      <td>180.200000</td>\n",
              "      <td>29623.350000</td>\n",
              "      <td>7002.190000</td>\n",
              "      <td>36115.200000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64887e6d-d154-4ec5-9457-8457d9962613')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-64887e6d-d154-4ec5-9457-8457d9962613 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-64887e6d-d154-4ec5-9457-8457d9962613');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.info"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nZLYO6yrIi2A",
        "outputId": "b33ded9d-9967-4026-f6a7-a2f469a69d6d"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of        loan_amnt  funded_amnt  funded_amnt_inv        term int_rate  \\\n",
              "0           5000         5000           4975.0   36 months   10.65%   \n",
              "1           2500         2500           2500.0   60 months   15.27%   \n",
              "2           2400         2400           2400.0   36 months   15.96%   \n",
              "3          10000        10000          10000.0   36 months   13.49%   \n",
              "4           3000         3000           3000.0   60 months   12.69%   \n",
              "...          ...          ...              ...         ...      ...   \n",
              "39712       2500         2500           1075.0   36 months    8.07%   \n",
              "39713       8500         8500            875.0   36 months   10.28%   \n",
              "39714       5000         5000           1325.0   36 months    8.07%   \n",
              "39715       5000         5000            650.0   36 months    7.43%   \n",
              "39716       7500         7500            800.0   36 months   13.75%   \n",
              "\n",
              "       installment grade sub_grade                   emp_title emp_length  \\\n",
              "0           162.87     B        B2                         NaN  10+ years   \n",
              "1            59.83     C        C4                       Ryder   < 1 year   \n",
              "2            84.33     C        C5                         NaN  10+ years   \n",
              "3           339.31     C        C1         AIR RESOURCES BOARD  10+ years   \n",
              "4            67.79     B        B5    University Medical Group     1 year   \n",
              "...            ...   ...       ...                         ...        ...   \n",
              "39712        78.42     A        A4             FiSite Research    4 years   \n",
              "39713       275.38     C        C1  Squarewave Solutions, Ltd.    3 years   \n",
              "39714       156.84     A        A4                         NaN   < 1 year   \n",
              "39715       155.38     A        A2                         NaN   < 1 year   \n",
              "39716       255.43     E        E2            Evergreen Center   < 1 year   \n",
              "\n",
              "      home_ownership  annual_inc verification_status issue_d  loan_status  \\\n",
              "0               RENT     24000.0            Verified  Dec-11   Fully Paid   \n",
              "1               RENT     30000.0     Source Verified  Dec-11  Charged Off   \n",
              "2               RENT     12252.0        Not Verified  Dec-11   Fully Paid   \n",
              "3               RENT     49200.0     Source Verified  Dec-11   Fully Paid   \n",
              "4               RENT     80000.0     Source Verified  Dec-11      Current   \n",
              "...              ...         ...                 ...     ...          ...   \n",
              "39712       MORTGAGE    110000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39713           RENT     18000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39714       MORTGAGE    100000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39715       MORTGAGE    200000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39716            OWN     22000.0        Not Verified  Jun-07   Fully Paid   \n",
              "\n",
              "      pymnt_plan                                                url  \\\n",
              "0              n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "1              n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "2              n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "3              n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "4              n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "...          ...                                                ...   \n",
              "39712          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39713          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39714          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39715          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "39716          n  https://lendingclub.com/browse/loanDetail.acti...   \n",
              "\n",
              "                                                    desc             purpose  \\\n",
              "0        Borrower added on 12/22/11 > I need to upgra...         credit_card   \n",
              "1        Borrower added on 12/22/11 > I plan to use t...                 car   \n",
              "2                                                    NaN      small_business   \n",
              "3        Borrower added on 12/21/11 > to pay for prop...               other   \n",
              "4        Borrower added on 12/21/11 > I plan on combi...               other   \n",
              "...                                                  ...                 ...   \n",
              "39712  Our current gutter system on our home is old a...    home_improvement   \n",
              "39713  The rate of interest and fees incurred by carr...         credit_card   \n",
              "39714                                                NaN  debt_consolidation   \n",
              "39715                                                NaN               other   \n",
              "39716  I plan to consolidate over $7,000 of debt: a c...  debt_consolidation   \n",
              "\n",
              "                           title zip_code addr_state    dti  delinq_2yrs  \\\n",
              "0                       Computer    860xx         AZ  27.65            0   \n",
              "1                           bike    309xx         GA   1.00            0   \n",
              "2           real estate business    606xx         IL   8.72            0   \n",
              "3                       personel    917xx         CA  20.00            0   \n",
              "4                       Personal    972xx         OR  17.94            0   \n",
              "...                          ...      ...        ...    ...          ...   \n",
              "39712           Home Improvement    802xx         CO  11.33            0   \n",
              "39713  Retiring credit card debt    274xx         NC   6.40            1   \n",
              "39714     MBA Loan Consolidation    017xx         MA   2.30            0   \n",
              "39715                   JAL Loan    208xx         MD   3.72            0   \n",
              "39716         Consolidation Loan    027xx         MA  14.29            1   \n",
              "\n",
              "      earliest_cr_line  inq_last_6mths  mths_since_last_delinq  \\\n",
              "0               Jan-85               1                     NaN   \n",
              "1               Apr-99               5                     NaN   \n",
              "2               Nov-01               2                     NaN   \n",
              "3               Feb-96               1                    35.0   \n",
              "4               Jan-96               0                    38.0   \n",
              "...                ...             ...                     ...   \n",
              "39712           Nov-90               0                     0.0   \n",
              "39713           Dec-86               1                     5.0   \n",
              "39714           Oct-98               0                     0.0   \n",
              "39715           Nov-88               0                     0.0   \n",
              "39716           Oct-03               0                    11.0   \n",
              "\n",
              "       mths_since_last_record  open_acc  pub_rec  revol_bal revol_util  \\\n",
              "0                         NaN         3        0      13648     83.70%   \n",
              "1                         NaN         3        0       1687      9.40%   \n",
              "2                         NaN         2        0       2956     98.50%   \n",
              "3                         NaN        10        0       5598        21%   \n",
              "4                         NaN        15        0      27783     53.90%   \n",
              "...                       ...       ...      ...        ...        ...   \n",
              "39712                     0.0        13        0       7274     13.10%   \n",
              "39713                     0.0         6        0       8847     26.90%   \n",
              "39714                     0.0        11        0       9698     19.40%   \n",
              "39715                     0.0        17        0      85607      0.70%   \n",
              "39716                     0.0         7        0       4175     51.50%   \n",
              "\n",
              "       total_acc initial_list_status  out_prncp  out_prncp_inv   total_pymnt  \\\n",
              "0              9                   f       0.00           0.00   5863.155187   \n",
              "1              4                   f       0.00           0.00   1008.710000   \n",
              "2             10                   f       0.00           0.00   3005.666844   \n",
              "3             37                   f       0.00           0.00  12231.890000   \n",
              "4             38                   f     524.06         524.06   3513.330000   \n",
              "...          ...                 ...        ...            ...           ...   \n",
              "39712         40                   f       0.00           0.00   2822.969293   \n",
              "39713          9                   f       0.00           0.00   9913.491822   \n",
              "39714         20                   f       0.00           0.00   5272.161128   \n",
              "39715         26                   f       0.00           0.00   5174.198551   \n",
              "39716          8                   f       0.00           0.00   9195.263334   \n",
              "\n",
              "       total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
              "0              5833.84          5000.00         863.16                0.00   \n",
              "1              1008.71           456.46         435.17                0.00   \n",
              "2              3005.67          2400.00         605.67                0.00   \n",
              "3             12231.89         10000.00        2214.92               16.97   \n",
              "4              3513.33          2475.94        1037.39                0.00   \n",
              "...                ...              ...            ...                 ...   \n",
              "39712          1213.88          2500.00         322.97                0.00   \n",
              "39713          1020.51          8500.00        1413.49                0.00   \n",
              "39714          1397.12          5000.00         272.16                0.00   \n",
              "39715           672.66          5000.00         174.20                0.00   \n",
              "39716           980.83          7500.00        1695.26                0.00   \n",
              "\n",
              "       recoveries  collection_recovery_fee last_pymnt_d  last_pymnt_amnt  \\\n",
              "0            0.00                     0.00       Jan-15           171.62   \n",
              "1          117.08                     1.11       Apr-13           119.66   \n",
              "2            0.00                     0.00       Jun-14           649.91   \n",
              "3            0.00                     0.00       Jan-15           357.48   \n",
              "4            0.00                     0.00       May-16            67.79   \n",
              "...           ...                      ...          ...              ...   \n",
              "39712        0.00                     0.00       Jul-10            80.90   \n",
              "39713        0.00                     0.00       Jul-10           281.94   \n",
              "39714        0.00                     0.00       Apr-08             0.00   \n",
              "39715        0.00                     0.00       Jan-08             0.00   \n",
              "39716        0.00                     0.00       Jun-10           256.59   \n",
              "\n",
              "      next_pymnt_d last_credit_pull_d  collections_12_mths_ex_med  \\\n",
              "0              NaN             May-16                         0.0   \n",
              "1              NaN             Sep-13                         0.0   \n",
              "2              NaN             May-16                         0.0   \n",
              "3              NaN             Apr-16                         0.0   \n",
              "4           Jun-16             May-16                         0.0   \n",
              "...            ...                ...                         ...   \n",
              "39712          NaN             Jun-10                         NaN   \n",
              "39713          NaN             Jul-10                         NaN   \n",
              "39714          NaN             Jun-07                         NaN   \n",
              "39715          NaN             Jun-07                         NaN   \n",
              "39716          NaN             Jun-10                         NaN   \n",
              "\n",
              "       policy_code application_type  acc_now_delinq  chargeoff_within_12_mths  \\\n",
              "0                1       INDIVIDUAL               0                       0.0   \n",
              "1                1       INDIVIDUAL               0                       0.0   \n",
              "2                1       INDIVIDUAL               0                       0.0   \n",
              "3                1       INDIVIDUAL               0                       0.0   \n",
              "4                1       INDIVIDUAL               0                       0.0   \n",
              "...            ...              ...             ...                       ...   \n",
              "39712            1       INDIVIDUAL               0                       NaN   \n",
              "39713            1       INDIVIDUAL               0                       NaN   \n",
              "39714            1       INDIVIDUAL               0                       NaN   \n",
              "39715            1       INDIVIDUAL               0                       NaN   \n",
              "39716            1       INDIVIDUAL               0                       NaN   \n",
              "\n",
              "       delinq_amnt  pub_rec_bankruptcies  tax_liens  \n",
              "0                0                   0.0        0.0  \n",
              "1                0                   0.0        0.0  \n",
              "2                0                   0.0        0.0  \n",
              "3                0                   0.0        0.0  \n",
              "4                0                   0.0        0.0  \n",
              "...            ...                   ...        ...  \n",
              "39712            0                   NaN        NaN  \n",
              "39713            0                   NaN        NaN  \n",
              "39714            0                   NaN        NaN  \n",
              "39715            0                   NaN        NaN  \n",
              "39716            0                   NaN        NaN  \n",
              "\n",
              "[39717 rows x 55 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "url, desc is a text string with no information. So dropping it."
      ],
      "metadata": {
        "id": "cdM92aSEI0J5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.drop(['url', 'desc'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "_WxZ7SfYI9ko"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.info"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4hkv6iXXJoH_",
        "outputId": "4f5d19c9-b80a-4558-fd1e-e362e38f2b45"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of        loan_amnt  funded_amnt  funded_amnt_inv        term int_rate  \\\n",
              "0           5000         5000           4975.0   36 months   10.65%   \n",
              "1           2500         2500           2500.0   60 months   15.27%   \n",
              "2           2400         2400           2400.0   36 months   15.96%   \n",
              "3          10000        10000          10000.0   36 months   13.49%   \n",
              "4           3000         3000           3000.0   60 months   12.69%   \n",
              "...          ...          ...              ...         ...      ...   \n",
              "39712       2500         2500           1075.0   36 months    8.07%   \n",
              "39713       8500         8500            875.0   36 months   10.28%   \n",
              "39714       5000         5000           1325.0   36 months    8.07%   \n",
              "39715       5000         5000            650.0   36 months    7.43%   \n",
              "39716       7500         7500            800.0   36 months   13.75%   \n",
              "\n",
              "       installment grade sub_grade                   emp_title emp_length  \\\n",
              "0           162.87     B        B2                         NaN  10+ years   \n",
              "1            59.83     C        C4                       Ryder   < 1 year   \n",
              "2            84.33     C        C5                         NaN  10+ years   \n",
              "3           339.31     C        C1         AIR RESOURCES BOARD  10+ years   \n",
              "4            67.79     B        B5    University Medical Group     1 year   \n",
              "...            ...   ...       ...                         ...        ...   \n",
              "39712        78.42     A        A4             FiSite Research    4 years   \n",
              "39713       275.38     C        C1  Squarewave Solutions, Ltd.    3 years   \n",
              "39714       156.84     A        A4                         NaN   < 1 year   \n",
              "39715       155.38     A        A2                         NaN   < 1 year   \n",
              "39716       255.43     E        E2            Evergreen Center   < 1 year   \n",
              "\n",
              "      home_ownership  annual_inc verification_status issue_d  loan_status  \\\n",
              "0               RENT     24000.0            Verified  Dec-11   Fully Paid   \n",
              "1               RENT     30000.0     Source Verified  Dec-11  Charged Off   \n",
              "2               RENT     12252.0        Not Verified  Dec-11   Fully Paid   \n",
              "3               RENT     49200.0     Source Verified  Dec-11   Fully Paid   \n",
              "4               RENT     80000.0     Source Verified  Dec-11      Current   \n",
              "...              ...         ...                 ...     ...          ...   \n",
              "39712       MORTGAGE    110000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39713           RENT     18000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39714       MORTGAGE    100000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39715       MORTGAGE    200000.0        Not Verified  Jul-07   Fully Paid   \n",
              "39716            OWN     22000.0        Not Verified  Jun-07   Fully Paid   \n",
              "\n",
              "      pymnt_plan             purpose                      title zip_code  \\\n",
              "0              n         credit_card                   Computer    860xx   \n",
              "1              n                 car                       bike    309xx   \n",
              "2              n      small_business       real estate business    606xx   \n",
              "3              n               other                   personel    917xx   \n",
              "4              n               other                   Personal    972xx   \n",
              "...          ...                 ...                        ...      ...   \n",
              "39712          n    home_improvement           Home Improvement    802xx   \n",
              "39713          n         credit_card  Retiring credit card debt    274xx   \n",
              "39714          n  debt_consolidation     MBA Loan Consolidation    017xx   \n",
              "39715          n               other                   JAL Loan    208xx   \n",
              "39716          n  debt_consolidation         Consolidation Loan    027xx   \n",
              "\n",
              "      addr_state    dti  delinq_2yrs earliest_cr_line  inq_last_6mths  \\\n",
              "0             AZ  27.65            0           Jan-85               1   \n",
              "1             GA   1.00            0           Apr-99               5   \n",
              "2             IL   8.72            0           Nov-01               2   \n",
              "3             CA  20.00            0           Feb-96               1   \n",
              "4             OR  17.94            0           Jan-96               0   \n",
              "...          ...    ...          ...              ...             ...   \n",
              "39712         CO  11.33            0           Nov-90               0   \n",
              "39713         NC   6.40            1           Dec-86               1   \n",
              "39714         MA   2.30            0           Oct-98               0   \n",
              "39715         MD   3.72            0           Nov-88               0   \n",
              "39716         MA  14.29            1           Oct-03               0   \n",
              "\n",
              "       mths_since_last_delinq  mths_since_last_record  open_acc  pub_rec  \\\n",
              "0                         NaN                     NaN         3        0   \n",
              "1                         NaN                     NaN         3        0   \n",
              "2                         NaN                     NaN         2        0   \n",
              "3                        35.0                     NaN        10        0   \n",
              "4                        38.0                     NaN        15        0   \n",
              "...                       ...                     ...       ...      ...   \n",
              "39712                     0.0                     0.0        13        0   \n",
              "39713                     5.0                     0.0         6        0   \n",
              "39714                     0.0                     0.0        11        0   \n",
              "39715                     0.0                     0.0        17        0   \n",
              "39716                    11.0                     0.0         7        0   \n",
              "\n",
              "       revol_bal revol_util  total_acc initial_list_status  out_prncp  \\\n",
              "0          13648     83.70%          9                   f       0.00   \n",
              "1           1687      9.40%          4                   f       0.00   \n",
              "2           2956     98.50%         10                   f       0.00   \n",
              "3           5598        21%         37                   f       0.00   \n",
              "4          27783     53.90%         38                   f     524.06   \n",
              "...          ...        ...        ...                 ...        ...   \n",
              "39712       7274     13.10%         40                   f       0.00   \n",
              "39713       8847     26.90%          9                   f       0.00   \n",
              "39714       9698     19.40%         20                   f       0.00   \n",
              "39715      85607      0.70%         26                   f       0.00   \n",
              "39716       4175     51.50%          8                   f       0.00   \n",
              "\n",
              "       out_prncp_inv   total_pymnt  total_pymnt_inv  total_rec_prncp  \\\n",
              "0               0.00   5863.155187          5833.84          5000.00   \n",
              "1               0.00   1008.710000          1008.71           456.46   \n",
              "2               0.00   3005.666844          3005.67          2400.00   \n",
              "3               0.00  12231.890000         12231.89         10000.00   \n",
              "4             524.06   3513.330000          3513.33          2475.94   \n",
              "...              ...           ...              ...              ...   \n",
              "39712           0.00   2822.969293          1213.88          2500.00   \n",
              "39713           0.00   9913.491822          1020.51          8500.00   \n",
              "39714           0.00   5272.161128          1397.12          5000.00   \n",
              "39715           0.00   5174.198551           672.66          5000.00   \n",
              "39716           0.00   9195.263334           980.83          7500.00   \n",
              "\n",
              "       total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  \\\n",
              "0             863.16                0.00        0.00                     0.00   \n",
              "1             435.17                0.00      117.08                     1.11   \n",
              "2             605.67                0.00        0.00                     0.00   \n",
              "3            2214.92               16.97        0.00                     0.00   \n",
              "4            1037.39                0.00        0.00                     0.00   \n",
              "...              ...                 ...         ...                      ...   \n",
              "39712         322.97                0.00        0.00                     0.00   \n",
              "39713        1413.49                0.00        0.00                     0.00   \n",
              "39714         272.16                0.00        0.00                     0.00   \n",
              "39715         174.20                0.00        0.00                     0.00   \n",
              "39716        1695.26                0.00        0.00                     0.00   \n",
              "\n",
              "      last_pymnt_d  last_pymnt_amnt next_pymnt_d last_credit_pull_d  \\\n",
              "0           Jan-15           171.62          NaN             May-16   \n",
              "1           Apr-13           119.66          NaN             Sep-13   \n",
              "2           Jun-14           649.91          NaN             May-16   \n",
              "3           Jan-15           357.48          NaN             Apr-16   \n",
              "4           May-16            67.79       Jun-16             May-16   \n",
              "...            ...              ...          ...                ...   \n",
              "39712       Jul-10            80.90          NaN             Jun-10   \n",
              "39713       Jul-10           281.94          NaN             Jul-10   \n",
              "39714       Apr-08             0.00          NaN             Jun-07   \n",
              "39715       Jan-08             0.00          NaN             Jun-07   \n",
              "39716       Jun-10           256.59          NaN             Jun-10   \n",
              "\n",
              "       collections_12_mths_ex_med  policy_code application_type  \\\n",
              "0                             0.0            1       INDIVIDUAL   \n",
              "1                             0.0            1       INDIVIDUAL   \n",
              "2                             0.0            1       INDIVIDUAL   \n",
              "3                             0.0            1       INDIVIDUAL   \n",
              "4                             0.0            1       INDIVIDUAL   \n",
              "...                           ...          ...              ...   \n",
              "39712                         NaN            1       INDIVIDUAL   \n",
              "39713                         NaN            1       INDIVIDUAL   \n",
              "39714                         NaN            1       INDIVIDUAL   \n",
              "39715                         NaN            1       INDIVIDUAL   \n",
              "39716                         NaN            1       INDIVIDUAL   \n",
              "\n",
              "       acc_now_delinq  chargeoff_within_12_mths  delinq_amnt  \\\n",
              "0                   0                       0.0            0   \n",
              "1                   0                       0.0            0   \n",
              "2                   0                       0.0            0   \n",
              "3                   0                       0.0            0   \n",
              "4                   0                       0.0            0   \n",
              "...               ...                       ...          ...   \n",
              "39712               0                       NaN            0   \n",
              "39713               0                       NaN            0   \n",
              "39714               0                       NaN            0   \n",
              "39715               0                       NaN            0   \n",
              "39716               0                       NaN            0   \n",
              "\n",
              "       pub_rec_bankruptcies  tax_liens  \n",
              "0                       0.0        0.0  \n",
              "1                       0.0        0.0  \n",
              "2                       0.0        0.0  \n",
              "3                       0.0        0.0  \n",
              "4                       0.0        0.0  \n",
              "...                     ...        ...  \n",
              "39712                   NaN        NaN  \n",
              "39713                   NaN        NaN  \n",
              "39714                   NaN        NaN  \n",
              "39715                   NaN        NaN  \n",
              "39716                   NaN        NaN  \n",
              "\n",
              "[39717 rows x 53 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Verify the columns having NaN data."
      ],
      "metadata": {
        "id": "V31_6dIQKfqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-DQmd72_KrTL",
        "outputId": "44f956fa-2323-44f3-8bbb-d75caf1dfd70"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                         0\n",
              "funded_amnt                       0\n",
              "funded_amnt_inv                   0\n",
              "term                              0\n",
              "int_rate                          0\n",
              "installment                       0\n",
              "grade                             0\n",
              "sub_grade                         0\n",
              "emp_title                      2459\n",
              "emp_length                     1075\n",
              "home_ownership                    0\n",
              "annual_inc                        0\n",
              "verification_status               0\n",
              "issue_d                           0\n",
              "loan_status                       0\n",
              "pymnt_plan                        0\n",
              "purpose                           0\n",
              "title                            11\n",
              "zip_code                          0\n",
              "addr_state                        0\n",
              "dti                               0\n",
              "delinq_2yrs                       0\n",
              "earliest_cr_line                  0\n",
              "inq_last_6mths                    0\n",
              "mths_since_last_delinq        25682\n",
              "mths_since_last_record        36931\n",
              "open_acc                          0\n",
              "pub_rec                           0\n",
              "revol_bal                         0\n",
              "revol_util                       50\n",
              "total_acc                         0\n",
              "initial_list_status               0\n",
              "out_prncp                         0\n",
              "out_prncp_inv                     0\n",
              "total_pymnt                       0\n",
              "total_pymnt_inv                   0\n",
              "total_rec_prncp                   0\n",
              "total_rec_int                     0\n",
              "total_rec_late_fee                0\n",
              "recoveries                        0\n",
              "collection_recovery_fee           0\n",
              "last_pymnt_d                     71\n",
              "last_pymnt_amnt                   0\n",
              "next_pymnt_d                  38577\n",
              "last_credit_pull_d                2\n",
              "collections_12_mths_ex_med       56\n",
              "policy_code                       0\n",
              "application_type                  0\n",
              "acc_now_delinq                    0\n",
              "chargeoff_within_12_mths         56\n",
              "delinq_amnt                       0\n",
              "pub_rec_bankruptcies            697\n",
              "tax_liens                        39\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.loan_status.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IKKTdY_NqZoU",
        "outputId": "85a86e81-956f-450c-e965-f9de14b33284"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Fully Paid     32950\n",
              "Charged Off     5627\n",
              "Current         1140\n",
              "Name: loan_status, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF = Loan_Details_DF[Loan_Details_DF.loan_status == 'Charged Off']"
      ],
      "metadata": {
        "id": "k_R1RfNZp8_N"
      },
      "execution_count": 194,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.emp_title.unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kfiRbQmbKv3i",
        "outputId": "27cf926e-0320-46a9-b3ba-266193da6c78"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Ryder', 'US Army', 'Starbucks', ..., 'Universal Advertising',\n",
              "       'Invision Power Services', 'Auto motors of miami'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.emp_title.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lO2Oafi9LO9A",
        "outputId": "425e8c17-8f19-4652-8daa-47038770e291"
      },
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "US Army                      502\n",
              "Bank of America               20\n",
              "Walmart                       14\n",
              "AT&T                          12\n",
              "UPS                           12\n",
              "                            ... \n",
              "U of D Jesuit High School      1\n",
              "EEOC                           1\n",
              "Life Ambulance                 1\n",
              "R. Young Enterprise, Inc.      1\n",
              "Auto motors of miami           1\n",
              "Name: emp_title, Length: 4636, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Impute emp title & emp length with the mode value. i.e. US Army"
      ],
      "metadata": {
        "id": "_HmdOWg2LXVf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.emp_length.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hibuYMIzNAhf",
        "outputId": "f66ab416-229d-4693-d1cc-d30976c793ee"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10+ years    1559\n",
              "< 1 year      639\n",
              "2 years       567\n",
              "3 years       555\n",
              "4 years       462\n",
              "5 years       458\n",
              "1 year        456\n",
              "6 years       307\n",
              "7 years       263\n",
              "8 years       203\n",
              "9 years       158\n",
              "Name: emp_length, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"emp_title\", \"emp_length\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mode().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JQcZP9e_NCjf",
        "outputId": "31395645-9ec5-47b2-ce7c-a586432fcc19"
      },
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwohthrwNMQX",
        "outputId": "962d7b7a-b493-4aba-fb55-3ddd1c177873"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.title.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cg7W6bY0NMzo",
        "outputId": "3e069f40-04a4-46dd-ee3f-35c36900d1db"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Debt Consolidation         307\n",
              "Debt Consolidation Loan    274\n",
              "Personal Loan               97\n",
              "Small Business Loan         95\n",
              "debt consolidation          95\n",
              "                          ... \n",
              "Ralph and Diana              1\n",
              "x1                           1\n",
              "Loanclub 2011                1\n",
              "desertrat                    1\n",
              "refinancing                  1\n",
              "Name: title, Length: 3249, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"title\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mode().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bZjB5rfXNYTp",
        "outputId": "4d546218-b545-4243-cff3-2ec440de92c6"
      },
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "guGLTo9FNlRh",
        "outputId": "7f88952c-d567-466c-f3ad-11bb52fb6cf5"
      },
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.mths_since_last_delinq.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2xM1sEDcNmCL",
        "outputId": "262bd868-12eb-4665-98ed-73fb885b68ca"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11219.443815    3485\n",
              "0.000000          67\n",
              "19.000000         52\n",
              "15.000000         46\n",
              "21.000000         40\n",
              "                ... \n",
              "64.000000         11\n",
              "1.000000           6\n",
              "83.000000          2\n",
              "107.000000         1\n",
              "97.000000          1\n",
              "Name: mths_since_last_delinq, Length: 87, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.mths_since_last_record.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3bN3G9DN7Hb",
        "outputId": "d0c876e3-729f-4958-9e32-1aed3cc048fd"
      },
      "execution_count": 204,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11219.443815    5049\n",
              "0.000000         111\n",
              "111.000000        19\n",
              "89.000000         15\n",
              "94.000000         15\n",
              "                ... \n",
              "21.000000          1\n",
              "33.000000          1\n",
              "75.000000          1\n",
              "12.000000          1\n",
              "129.000000         1\n",
              "Name: mths_since_last_record, Length: 89, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "mths_since_last_delinq & mths_since_last_record have most of the values as NaN. Also the mode values are 0.0 for both. We will take the mean and impute the 2 columns."
      ],
      "metadata": {
        "id": "aJC-p1QYOJC3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"mths_since_last_delinq\", \"mths_since_last_record\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mean().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lpdr7IahOceG",
        "outputId": "d64b7258-aa4f-4fc0-f2fc-097c0cd5210e"
      },
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
            "  \n",
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yBIdAvV5OrCc",
        "outputId": "8aa1f24a-eef8-4fe8-f40f-1398d89212a4"
      },
      "execution_count": 206,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.revol_util.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oMUBb2ygOrul",
        "outputId": "f62edf68-14fb-4b66-dbec-a780adb420c0"
      },
      "execution_count": 207,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0%        160\n",
              "66.60%     17\n",
              "89.40%     15\n",
              "73.40%     15\n",
              "63.70%     15\n",
              "         ... \n",
              "13.30%      1\n",
              "4.20%       1\n",
              "16.20%      1\n",
              "44.70%      1\n",
              "95.70%      1\n",
              "Name: revol_util, Length: 999, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "revol_utils is the % column. So imputing with mode which is 0.0%"
      ],
      "metadata": {
        "id": "MVMRhecGR-dj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"revol_util\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mode().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V6dhZkcUSJWw",
        "outputId": "4fec3924-2276-4ff1-e256-c02c3a2c366e"
      },
      "execution_count": 208,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.revol_util.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4nmU4aTuSOlu",
        "outputId": "f523767b-8c83-403d-aba9-1bce738b662d"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0%        160\n",
              "66.60%     17\n",
              "89.40%     15\n",
              "73.40%     15\n",
              "63.70%     15\n",
              "         ... \n",
              "13.30%      1\n",
              "4.20%       1\n",
              "16.20%      1\n",
              "44.70%      1\n",
              "95.70%      1\n",
              "Name: revol_util, Length: 999, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.last_pymnt_d.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gFdaIAbVSQjO",
        "outputId": "e0246a14-20bb-4fb5-c947-bebd0e35af1a"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Oct-12    177\n",
              "Jul-12    164\n",
              "Jun-12    151\n",
              "Aug-12    150\n",
              "Feb-12    148\n",
              "         ... \n",
              "May-08      4\n",
              "Apr-16      2\n",
              "Mar-16      1\n",
              "Nov-08      1\n",
              "Mar-08      1\n",
              "Name: last_pymnt_d, Length: 98, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "71 records of last_pymnt_d has NaN. So imputing with mode value."
      ],
      "metadata": {
        "id": "_XPWaZVKSjjC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"last_pymnt_d\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mode().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hA-A15ShSjOH",
        "outputId": "cd607aae-42a9-40f0-a75a-aa91fd6c2aad"
      },
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lisllc7VSYq_",
        "outputId": "b3c853dc-9ace-499c-dfae-fe63d8953a16"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "next_pymnt_d is a huge chunck of records with NaN. So dropping the column since the same dates will repeat of imputed."
      ],
      "metadata": {
        "id": "t99l3W-PS1av"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DQYF4Z7FTT7a",
        "outputId": "bd88abb2-f341-46b6-ddd5-1bfd62e56022"
      },
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 214
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\"last_credit_pull_d\", \"collections_12_mths_ex_med\", \"chargeoff_within_12_mths\",\"pub_rec_bankruptcies\",\"tax_liens\"\n",
        "all above columns have small amount of records as NaN. SO imputing with mode."
      ],
      "metadata": {
        "id": "xDS0XwKCUHy2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = [\"last_credit_pull_d\", \"collections_12_mths_ex_med\", \"chargeoff_within_12_mths\",\"pub_rec_bankruptcies\",\"tax_liens\"]\n",
        "Loan_Details_DF[cols]=Loan_Details_DF[cols].fillna(Loan_Details_DF.mode().iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HI3oB7krT_S8",
        "outputId": "2517daf5-f562-47e4-875d-e01c986a7533"
      },
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[k1] = value[k2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e73zZKE0T_6T",
        "outputId": "2e7c2e03-6d7d-4955-c632-4df688c23373"
      },
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "loan_amnt                     0\n",
              "funded_amnt                   0\n",
              "funded_amnt_inv               0\n",
              "term                          0\n",
              "int_rate                      0\n",
              "installment                   0\n",
              "grade                         0\n",
              "sub_grade                     0\n",
              "emp_title                     0\n",
              "emp_length                    0\n",
              "home_ownership                0\n",
              "annual_inc                    0\n",
              "verification_status           0\n",
              "issue_d                       0\n",
              "loan_status                   0\n",
              "pymnt_plan                    0\n",
              "purpose                       0\n",
              "title                         0\n",
              "zip_code                      0\n",
              "addr_state                    0\n",
              "dti                           0\n",
              "delinq_2yrs                   0\n",
              "earliest_cr_line              0\n",
              "inq_last_6mths                0\n",
              "mths_since_last_delinq        0\n",
              "mths_since_last_record        0\n",
              "open_acc                      0\n",
              "pub_rec                       0\n",
              "revol_bal                     0\n",
              "revol_util                    0\n",
              "total_acc                     0\n",
              "initial_list_status           0\n",
              "out_prncp                     0\n",
              "out_prncp_inv                 0\n",
              "total_pymnt                   0\n",
              "total_pymnt_inv               0\n",
              "total_rec_prncp               0\n",
              "total_rec_int                 0\n",
              "total_rec_late_fee            0\n",
              "recoveries                    0\n",
              "collection_recovery_fee       0\n",
              "last_pymnt_d                  0\n",
              "last_pymnt_amnt               0\n",
              "last_credit_pull_d            0\n",
              "collections_12_mths_ex_med    0\n",
              "policy_code                   0\n",
              "application_type              0\n",
              "acc_now_delinq                0\n",
              "chargeoff_within_12_mths      0\n",
              "delinq_amnt                   0\n",
              "pub_rec_bankruptcies          0\n",
              "tax_liens                     0\n",
              "Bin_Int_Rates                 0\n",
              "Bin_Loan_Amnt                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 216
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "All NaN columns have been treated with appropriate values. So now we don't have any NaN values in the columns."
      ],
      "metadata": {
        "id": "UeC7PCe7ULdM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Loan_Details_DF.loan_amnt is our column of interest. SO getting some descripiton about it."
      ],
      "metadata": {
        "id": "lvEA63-wUjsX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.loan_amnt.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RGccrENzUb5d",
        "outputId": "166e60a4-f73e-4b14-9890-8bc4414daad4"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     5627.000000\n",
              "mean     12104.385108\n",
              "std       8085.732038\n",
              "min        900.000000\n",
              "25%       5600.000000\n",
              "50%      10000.000000\n",
              "75%      16500.000000\n",
              "max      35000.000000\n",
              "Name: loan_amnt, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 217
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.funded_amnt.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdmgnNAnUgbG",
        "outputId": "bcbb84ae-6c39-407e-ec72-bd2834300357"
      },
      "execution_count": 218,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     5627.000000\n",
              "mean     11753.398792\n",
              "std       7760.516335\n",
              "min        900.000000\n",
              "25%       5575.000000\n",
              "50%      10000.000000\n",
              "75%      16000.000000\n",
              "max      35000.000000\n",
              "Name: funded_amnt, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 218
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "funded_amnt & loan_amnt have the same kind of data distribution. But loan_amt is more than funded_amt in some cases."
      ],
      "metadata": {
        "id": "Shj7MXN8VQR1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details.funded_amnt_inv.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nVb-cvqgU5Xf",
        "outputId": "311047c3-402a-4e36-b193-144e4d268e20"
      },
      "execution_count": 219,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    39717.000000\n",
              "mean     10397.448868\n",
              "std       7128.450439\n",
              "min          0.000000\n",
              "25%       5000.000000\n",
              "50%       8975.000000\n",
              "75%      14400.000000\n",
              "max      35000.000000\n",
              "Name: funded_amnt_inv, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 219
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "funded_amnt and funded_amnt_inv are different in min amount case. While max amount case remains same."
      ],
      "metadata": {
        "id": "awJIHk4KVgvQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot a bar Graph for Loan amount, funded amount funded amount inv versus term."
      ],
      "metadata": {
        "id": "ZJefas4ZV3pd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.term.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8-nUdiy4W0Lp",
        "outputId": "bbff187d-3183-4d90-9c89-110857d8bc85"
      },
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 36 months    3227\n",
              " 60 months    2400\n",
              "Name: term, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "D8kb0GwKVGcY",
        "outputId": "86fea2e4-5b83-41bc-9958-d322d21bf52a"
      },
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(Loan_Details_DF.loan_amnt, bins=30, alpha=0.5,\n",
        "         histtype='stepfilled', color='steelblue', edgecolor='none')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "0It46qugWQ7s",
        "outputId": "efea615c-a33a-414e-9b6d-9cbfa0920257"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can observe that it follows a Negative scked data plot for Loan Amount. Max data lies around 5000 units."
      ],
      "metadata": {
        "id": "EZOKRtaRX1z1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(Loan_Details_DF.funded_amnt, bins=30, alpha=0.5,\n",
        "         histtype='stepfilled', color='steelblue', edgecolor='none')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "lNJ6j3AVWeWl",
        "outputId": "711fe5b9-558b-495a-c2a2-7f10bcd44d81"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPqklEQVR4nO3db4xc1XnH8e9TG0xUEmzwyrJsqwsNKCJVC+6WECUKFSiKcaKaFyQirRyLWrLUgESaVo1ppJZIrQSpWghKReQGiiFRgJBUWFGqxgVCWlWYLMEYAwIWE4Qtgzf8S1AUWidPX8wxmV12Z2d35+7OHH8/0mrPPffOzDPXd38+e+6du5GZSJLq8huLXYAkqfcMd0mqkOEuSRUy3CWpQoa7JFVo6WIXALBy5cocHh5e7DIkaaA8/PDDP8nMoanW9UW4Dw8PMzo6uthlSNJAiYjnp1vntIwkVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFWoLz6hOqhuf+DprrbbfMFZDVciSRM5cpekChnuklQhp2XU9fQSOMUkDQpH7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUoa7DPSKWRMQjEfGdsnx6ROyJiLGIuDMiTiz9y8ryWFk/3EzpkqTpzGbkfhXwZNvydcD1mflu4FVga+nfCrxa+q8v20mSFlBX4R4Ra4GPAl8tywFcCNxdNtkJXFLam8oyZf1FZXtJ0gLpduR+A/BXwK/K8mnAa5l5tCwfBNaU9hrgBYCy/vWy/QQRsS0iRiNidHx8fI7lS5KmMmO4R8THgCOZ+XAvXzgzd2TmSGaODA0N9fKpJem4t7SLbT4A/FFEbAROAt4FfAlYHhFLy+h8LXCobH8IWAccjIilwCnAyz2vXJI0rRlH7pl5dWauzcxh4DLgvsz8E+B+4NKy2RbgntLeVZYp6+/LzOxp1ZKkjuZznfvngM9GxBitOfWbS//NwGml/7PA9vmVKEmarW6mZd6Smd8Hvl/aB4DzptjmF8DHe1CbJGmOZhXu0u0PPN3VdpsvOKvhSiR14u0HJKlChrskVchpmQXgVIakhebIXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekCnmd+wDyunlJM3HkLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkirkpZBT6PZSQ0nqV47cJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQn5CVQPBP1AizY4jd0mqkOEuSRUy3CWpQsfNnLt3epR0PHHkLkkVmjHcI+KkiHgoIh6NiMcj4gul//SI2BMRYxFxZ0ScWPqXleWxsn642bcgSZqsm5H7m8CFmfl7wDnAhog4H7gOuD4z3w28Cmwt228FXi3915ftJEkLaMY598xM4I2yeEL5SuBC4I9L/07gGuAmYFNpA9wNfDkiojyPOvC8gKRe6WrOPSKWRMRe4AiwG3gWeC0zj5ZNDgJrSnsN8AJAWf86cNoUz7ktIkYjYnR8fHx+70KSNEFX4Z6Zv8zMc4C1wHnAe+b7wpm5IzNHMnNkaGhovk8nSWozq6tlMvM14H7g/cDyiDg2rbMWOFTah4B1AGX9KcDLPalWktSVbq6WGYqI5aX9DuDDwJO0Qv7SstkW4J7S3lWWKevvc75dkhZWNx9iWg3sjIgltP4zuCszvxMRTwB3RMTfAY8AN5ftbwZuj4gx4BXgsgbqliR10M3VMvuAc6foP0Br/n1y/y+Aj/ekOknSnPgJVUmqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkirUzR/rkNSF2x94uqvtNl9wVsOVSI7cJalKhrskVchwl6QKDfyce7fznJJ0PHHkLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkio08JdCanpeJiodvxy5S1KFDHdJqpDhLkkVMtwlqUKeUJU0gfelr4Mjd0mqkOEuSRUy3CWpQjOGe0Ssi4j7I+KJiHg8Iq4q/adGxO6IeKZ8X1H6IyJujIixiNgXEeubfhOSpIm6GbkfBf4iM88GzgeuiIizge3AvZl5JnBvWQa4GDizfG0Dbup51ZKkjmYM98w8nJk/Ku2fAU8Ca4BNwM6y2U7gktLeBNyWLQ8CyyNidc8rlyRNa1Zz7hExDJwL7AFWZebhsupFYFVprwFeaHvYwdI3+bm2RcRoRIyOj4/PsmxJUiddh3tEnAx8C/hMZv60fV1mJpCzeeHM3JGZI5k5MjQ0NJuHSpJm0NWHmCLiBFrB/vXM/HbpfikiVmfm4TLtcqT0HwLWtT18bemT3sY7V0rN6OZqmQBuBp7MzH9qW7UL2FLaW4B72vo/Va6aOR94vW36RpK0ALoZuX8A2Aw8FhF7S99fA9cCd0XEVuB54BNl3XeBjcAY8HPg8p5WLHXgR+ellhnDPTP/G4hpVl80xfYJXDHPuiRJ8+AnVCWpQoa7JFXIcJekChnuklQh/1iH1IHX4WtQOXKXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKuTfUFUj/NujOt51+zOw+YKzGnl9R+6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKjRjuEfELRFxJCL2t/WdGhG7I+KZ8n1F6Y+IuDEixiJiX0Ssb7J4SdLUuhm53wpsmNS3Hbg3M88E7i3LABcDZ5avbcBNvSlTkjQbM4Z7Zv4AeGVS9yZgZ2nvBC5p678tWx4ElkfE6l4VK0nqzlzn3Fdl5uHSfhFYVdprgBfatjtY+t4mIrZFxGhEjI6Pj8+xDEnSVOZ9y9/MzIjIOTxuB7ADYGRkZNaPl+bDWxKrdnMdub90bLqlfD9S+g8B69q2W1v6JEkLaK4j913AFuDa8v2etv4rI+IO4H3A623TN5IWkb+tHF9mDPeI+Abwh8DKiDgI/C2tUL8rIrYCzwOfKJt/F9gIjAE/By5voGZJ0gxmDPfM/OQ0qy6aYtsErphvUZKk+fETqpJUIcNdkipkuEtShQx3SaqQ4S5JFZr3J1QlzU6315tvvuCshitRzRy5S1KFHLlLfcoRvubDkbskVchwl6QKGe6SVCHn3CUNHM9HzMyRuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalCfohJGnDdfqBHxxdH7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalCXgopaU5mcwnm8Xxf9cViuEtqnH9cY+E5LSNJFTLcJalChrskVchwl6QKGe6SVCHDXZIq1MilkBGxAfgSsAT4amZe28TrSFInvb4d8iBdqtnzcI+IJcA/Ax8GDgI/jIhdmflEr19LUl28N33vNDFyPw8Yy8wDABFxB7AJMNwlDbRB+s+niXBfA7zQtnwQeN/kjSJiG7CtLL4REU9N83wrgZ/0tMLmWXPzBq1eGLyaB61eGMCaPzW/mn9ruhWLdvuBzNwB7Jhpu4gYzcyRBSipZ6y5eYNWLwxezYNWL1hzuyauljkErGtbXlv6JEkLpIlw/yFwZkScHhEnApcBuxp4HUnSNHo+LZOZRyPiSuA/aF0KeUtmPj6Pp5xx6qYPWXPzBq1eGLyaB61esOa3RGY28bySpEXkJ1QlqUKGuyRVqK/DPSI2RMRTETEWEdsXuZYfR8RjEbE3IkZL36kRsTsininfV5T+iIgbS937ImJ92/NsKds/ExFbelzjLRFxJCL2t/X1rMaI+P2yD8bKY6Ohmq+JiENlX++NiI1t664ur/9URHykrX/KY6Wc2N9T+u8sJ/nnU++6iLg/Ip6IiMcj4qrS35f7uUO9/byPT4qIhyLi0VLzFzq9TkQsK8tjZf3wXN9LAzXfGhHPte3nc0p/88dFZvblF62Tsc8CZwAnAo8CZy9iPT8GVk7q+yKwvbS3A9eV9kbg34EAzgf2lP5TgQPl+4rSXtHDGj8ErAf2N1Ej8FDZNspjL26o5muAv5xi27PLcbAMOL0cH0s6HSvAXcBlpf0V4M/mWe9qYH1pvxN4utTVl/u5Q739vI8DOLm0TwD2lP0x5esAnwa+UtqXAXfO9b00UPOtwKVTbN/4cdHPI/e3bmOQmf8LHLuNQT/ZBOws7Z3AJW39t2XLg8DyiFgNfATYnZmvZOarwG5gQ6+KycwfAK80UWNZ967MfDBbR9ptbc/V65qnswm4IzPfzMzngDFax8mUx0oZ2VwI3F0e3/7+51rv4cz8UWn/DHiS1qey+3I/d6h3Ov2wjzMz3yiLJ5Sv7PA67fv+buCiUtes3ktDNU+n8eOin8N9qtsYdDoom5bA9yLi4WjdOgFgVWYeLu0XgVWlPV3ti/GeelXjmtKe3N+UK8uvq7ccm+KYobap+k8DXsvMo03UXH79P5fWKK3v9/OkeqGP93FELImIvcARWgH3bIfXeau2sv71UteC/hxOrjkzj+3nvy/7+fqIWDa55i5rm/Vx0c/h3m8+mJnrgYuBKyLiQ+0ry/+mfX1d6SDUWNwE/DZwDnAY+MfFLeftIuJk4FvAZzLzp+3r+nE/T1FvX+/jzPxlZp5D6xPu5wHvWeSSZjS55oj4HeBqWrX/Aa2pls8tVD39HO59dRuDzDxUvh8B/o3WAfdS+XWJ8v1I2Xy62hfjPfWqxkOlPbm/5zLzpfKD8ivgX2jt67nU/DKtX3eXTuqfl4g4gVZQfj0zv126+3Y/T1Vvv+/jYzLzNeB+4P0dXuet2sr6U0pdi/Jz2FbzhjItlpn5JvCvzH0/z/646DQhv5hftD49e4DWiZBjJz3eu0i1/Cbwzrb2/9CaK/8HJp5E+2Jpf5SJJ0seyl+fLHmO1omSFaV9ao9rHWbiycme1cjbT+hsbKjm1W3tP6c1bwrwXiaeIDtA6+TYtMcK8E0mnoT79DxrDVrznTdM6u/L/dyh3n7ex0PA8tJ+B/BfwMemex3gCiaeUL1rru+lgZpXt/073ABcu1DHxYKE4zx22EZaZ/efBT6/iHWcUQ6AR4HHj9VCa17vXuAZ4D/b/hGC1h8seRZ4DBhpe64/pXViZwy4vMd1foPWr9j/R2tObmsvawRGgP3lMV+mfMK5gZpvLzXto3VfovYg+nx5/adou1pgumOl/Ns9VN7LN4Fl86z3g7SmXPYBe8vXxn7dzx3q7ed9/LvAI6W2/cDfdHod4KSyPFbWnzHX99JAzfeV/bwf+Bq/vqKm8ePC2w9IUoX6ec5dkjRHhrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mq0P8DvPv0eHBKzI0AAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can observe that it follows a Negative scked data plot for funded Amount. Max data lies around 5000 units."
      ],
      "metadata": {
        "id": "BfiN42ErY8uc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(Loan_Details_DF.funded_amnt_inv, bins=30, alpha=0.5,\n",
        "         histtype='stepfilled', color='steelblue', edgecolor='none')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "eruIFtDVX-GS",
        "outputId": "c0f937d9-afc1-49ca-d13b-4f6be51281ac"
      },
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can observe that it follows a Negative scked data plot for funded Amount Inv. Max data lies around 5000 units.\n",
        "Also we can note that min amount funded Inv is 0. While for Loan & funded amount it is greater than 0."
      ],
      "metadata": {
        "id": "VDNdbB3TamVh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize =(10, 7))\n",
        "plt.boxplot(Loan_Details_DF.loan_amnt)\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "mwlCCzx0a_9B",
        "outputId": "68f45a6d-160d-49c3-8835-a77d2ccafb5e"
      },
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {},
          "execution_count": 225
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize =(10, 7))\n",
        "plt.boxplot(Loan_Details_DF.funded_amnt)\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "kmBFBzXJbPs9",
        "outputId": "1f7a50df-c752-4d85-d32b-df01442ce487"
      },
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {},
          "execution_count": 226
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize =(10, 7))\n",
        "plt.boxplot(Loan_Details_DF.funded_amnt_inv)\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "JtHnp547dR2-",
        "outputId": "71ddbf8a-1402-45df-d0b8-7362f3c117aa"
      },
      "execution_count": 227,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {},
          "execution_count": 227
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "All data for loan_amt, funded_amt, funded_amt_inv shows that data greater than 30,000 is outliers. But these data are very important, so we keep them."
      ],
      "metadata": {
        "id": "CPRkDP8md8Vt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details.term.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "raAF2f2dds2R",
        "outputId": "b912e2e0-2076-4439-9034-6d62c61c7c52"
      },
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 36 months    29096\n",
              " 60 months    10621\n",
              "Name: term, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 228
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots()\n",
        "for color in ['tab:blue']:\n",
        "    ax.scatter(Loan_Details_DF.term, \n",
        "               Loan_Details_DF.loan_amnt, c=color, label=color,\n",
        "               alpha=0.3)\n",
        "\n",
        "ax.legend()\n",
        "ax.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "FbPU-pH9ei7x",
        "outputId": "23866bad-1014-42e1-9b52-d57c698fbdc2"
      },
      "execution_count": 229,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots()\n",
        "for color in ['tab:blue']:\n",
        "    ax.scatter(Loan_Details_DF.term, \n",
        "               Loan_Details_DF.funded_amnt, c=color, label=color,\n",
        "               alpha=0.3)\n",
        "\n",
        "ax.legend()\n",
        "ax.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "EO4O_JwEgs9N",
        "outputId": "f1ed9210-648f-4d86-d7bd-a49658e783f3"
      },
      "execution_count": 230,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots()\n",
        "for color in ['tab:blue']:\n",
        "    ax.scatter(Loan_Details_DF.term, \n",
        "               Loan_Details_DF.funded_amnt_inv, c=color, label=color,\n",
        "               alpha=0.3)\n",
        "\n",
        "ax.legend()\n",
        "ax.grid(True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "DGr8oGEbgtbC",
        "outputId": "7fd9dddb-328f-48f0-803c-048022ccd091"
      },
      "execution_count": 231,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.int_rate.value_counts().sort_values()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RiWZkDy_humN",
        "outputId": "1807cd58-fab1-42ea-b3cb-91a7e042cae5"
      },
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18.72      1\n",
              "22.94      1\n",
              "13.12      1\n",
              "21.27      1\n",
              "21.14      1\n",
              "        ... \n",
              "11.99     76\n",
              "11.71     91\n",
              "10.99     95\n",
              "11.49    127\n",
              "13.49    127\n",
              "Name: int_rate, Length: 332, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 232
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.int_rate.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0feJRFzYiEoO",
        "outputId": "2c54bee5-60fc-4cce-ab85-ede5b9a1e137"
      },
      "execution_count": 233,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    5627.000000\n",
              "mean       13.820432\n",
              "std         3.654413\n",
              "min         5.420000\n",
              "25%        11.310000\n",
              "50%        13.610000\n",
              "75%        16.400000\n",
              "max        24.400000\n",
              "Name: int_rate, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 233
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Interest rate has %. Hence need to be removed."
      ],
      "metadata": {
        "id": "-TxA3H3Pikhb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.int_rate.astype('float64')\n",
        "Loan_Details_DF.int_rate = pd.to_numeric(Loan_Details_DF.int_rate)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8uv1ftd-i2wG",
        "outputId": "3bb44ecc-c274-4d3d-dca7-f9305f803144"
      },
      "execution_count": 236,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:5516: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  self[name] = value\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.int_rate.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VlaKg_vDjIVu",
        "outputId": "fec08a89-e555-418d-a3eb-471d7d0152ee"
      },
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    5627.000000\n",
              "mean       13.820432\n",
              "std         3.654413\n",
              "min         5.420000\n",
              "25%        11.310000\n",
              "50%        13.610000\n",
              "75%        16.400000\n",
              "max        24.400000\n",
              "Name: int_rate, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Binning the data for Interest rate."
      ],
      "metadata": {
        "id": "nBepf7L1kUCN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bin_labels_5 = ['Very Low', 'Low', 'Moderate', 'High', 'Very High']\n",
        "Loan_Details_DF['Bin_Int_Rates'] = pd.qcut(Loan_Details_DF['int_rate'], q=5, labels=bin_labels_5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MrpdQ6UFjQUn",
        "outputId": "80c63efa-c544-42df-8798-77d085fb5a60"
      },
      "execution_count": 238,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bin_labels_5 = ['Very Low', 'Low', 'Moderate', 'High', 'Very High']\n",
        "Loan_Details_DF['Bin_Loan_Amnt'] = pd.qcut(Loan_Details_DF['loan_amnt'], q=5, labels=bin_labels_5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZcdiJxX9mlpN",
        "outputId": "cbe06b94-4e04-4b3a-bc9d-3b2b2c7f31f7"
      },
      "execution_count": 239,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.Bin_Int_Rates.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "njNgSV__koAH",
        "outputId": "db6cf6aa-970b-47b7-dad8-d0e43b5a7edc"
      },
      "execution_count": 240,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Very Low     1140\n",
              "High         1134\n",
              "Moderate     1130\n",
              "Low          1118\n",
              "Very High    1105\n",
              "Name: Bin_Int_Rates, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 240
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data for Interest Rates shows that Very Low Interest rates has high number of loans compared to Very High and Moderate."
      ],
      "metadata": {
        "id": "STdNHZ22lbAS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['Bin_Int_Rates'], Loan_Details_DF['Bin_Loan_Amnt'], color ='maroon')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "2mMNKcx3lYux",
        "outputId": "a427be0f-fcc1-4d1a-e65c-615ce679ffbf"
      },
      "execution_count": 241,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data shows that all interest rates have some presence in all different Loan amounts."
      ],
      "metadata": {
        "id": "nTcLKDmlm_-Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.installment.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4uG33ZfmEmc",
        "outputId": "9a98bed4-22c5-4d39-c151-ba23867b7aff"
      },
      "execution_count": 242,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "276.06    9\n",
              "324.42    8\n",
              "296.75    8\n",
              "203.59    7\n",
              "320.95    7\n",
              "         ..\n",
              "153.78    1\n",
              "355.99    1\n",
              "59.19     1\n",
              "301.10    1\n",
              "678.08    1\n",
              "Name: installment, Length: 4317, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 242
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['int_rate'], Loan_Details_DF['installment'], color ='maroon')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "tA-EJFJPnPMe",
        "outputId": "0f0d3680-6abc-4277-ed90-51919e9ec329"
      },
      "execution_count": 243,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data shows that as interest rate increases the Installment amount is more. Concentration is more at 7 to 17.5 % where installment ranges."
      ],
      "metadata": {
        "id": "t380hgtCnnSM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['loan_amnt'], Loan_Details_DF['installment'], color ='maroon')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "_pQsD7GXnjNS",
        "outputId": "676e58d7-5650-4293-c13d-03a7d4dba28d"
      },
      "execution_count": 244,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data shows that as Loan amount increases the Installment increases linearly. Its quite logical."
      ],
      "metadata": {
        "id": "aThpNZsmnaYz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_Details_DF.grade.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IEzTuzTdnYDg",
        "outputId": "4ee3d168-bdc2-4ee9-b684-d84d00fb8091"
      },
      "execution_count": 245,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "B    1425\n",
              "C    1347\n",
              "D    1118\n",
              "E     715\n",
              "A     602\n",
              "F     319\n",
              "G     101\n",
              "Name: grade, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 245
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['grade'], Loan_Details_DF['loan_amnt'], color ='maroon')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "gHYEWsWIoYSv",
        "outputId": "03ad4350-3499-4fac-ab4d-1905b4ef2ec5"
      },
      "execution_count": 246,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data shows that all grades have the same kind of loans till 25000. Grades  have fewer data at higher loan. While grade G has few data at higher end."
      ],
      "metadata": {
        "id": "wlQJNr7UpAHi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['sub_grade'], Loan_Details_DF['loan_amnt'], color ='maroon')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "DuO0J1nvonxx",
        "outputId": "1f692633-38ba-49d0-cd82-e92fd0e1fc76"
      },
      "execution_count": 247,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There is a scattered data for sub_grades for loan_amnt."
      ],
      "metadata": {
        "id": "ZnRw63Dspetv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize = (10, 5))\n",
        " \n",
        "# creating the bar plot\n",
        "plt.scatter(Loan_Details_DF['emp_title'], Loan_Details_DF['loan_amnt'], color ='maroon')\n",
        "plt.xticks(Loan_Details_DF['emp_title'], rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 814
        },
        "id": "GEgpWhTopbZe",
        "outputId": "87c00a76-5b4b-4d83-a527-1527a135dd81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-250-a51ee7dff7c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# creating the bar plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLoan_Details_DF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'emp_title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLoan_Details_DF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loan_amnt'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'maroon'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLoan_Details_DF\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'emp_title'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrotate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m90\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mxticks\u001b[0;34m(ticks, labels, **kwargs)\u001b[0m\n\u001b[1;32m   1487\u001b[0m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1489\u001b[0;31m         \u001b[0ml\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1490\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1491\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mlocs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, kwargs)\u001b[0m\n\u001b[1;32m    175\u001b[0m         \u001b[0msentinel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# bbox can be None, so use another sentinel.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    176\u001b[0m         \u001b[0mbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentinel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 177\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    178\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbbox\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msentinel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_bbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_property\u001b[0;34m(self, k, v)\u001b[0m\n\u001b[1;32m   1000\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1001\u001b[0m                     raise AttributeError('{!r} object has no property {!r}'\n\u001b[0;32m-> 1002\u001b[0;31m                                          .format(type(self).__name__, k))\n\u001b[0m\u001b[1;32m   1003\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Text' object has no property 'rotate'"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 131 missing from current font.\n",
            "  font.set_text(s, 0.0, flags=flags)\n",
            "/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 131 missing from current font.\n",
            "  font.set_text(s, 0, flags=flags)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error in callback <function install_repl_displayhook.<locals>.post_execute at 0x7f7aa3a2a170> (for post_execute):\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mpost_execute\u001b[0;34m()\u001b[0m\n\u001b[1;32m    107\u001b[0m             \u001b[0;32mdef\u001b[0m \u001b[0mpost_execute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 109\u001b[0;31m                     \u001b[0mdraw_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m             \u001b[0;31m# IPython >= 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/_pylab_helpers.py\u001b[0m in \u001b[0;36mdraw_all\u001b[0;34m(cls, force)\u001b[0m\n\u001b[1;32m    125\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mf_mgr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_all_fig_managers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mforce\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mf_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstale\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m                 \u001b[0mf_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0matexit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdestroy_all\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mdraw_idle\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1945\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_idle_drawing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1946\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_idle_draw_cntx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1947\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1948\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1949\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdeprecated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3.2\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    391\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    392\u001b[0m               else nullcontext()):\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1736\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2628\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1237\u001b[0m         \u001b[0;31m# the actual bbox\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1239\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_label_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1241\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_update_label_position\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2019\u001b[0m         \u001b[0;31m# get bounding boxes for this axis and any siblings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2020\u001b[0m         \u001b[0;31m# that have been set by `fig.align_xlabels()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2021\u001b[0;31m         \u001b[0mbboxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbboxes2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick_boxes_siblings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2022\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2023\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick_boxes_siblings\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2004\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mnn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_siblings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2005\u001b[0m             \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2006\u001b[0;31m             \u001b[0mtlb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtlb2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick_bboxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticks_to_draw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2007\u001b[0m             \u001b[0mbboxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtlb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2008\u001b[0m             \u001b[0mbboxes2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtlb2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick_bboxes\u001b[0;34m(self, ticks, renderer)\u001b[0m\n\u001b[1;32m   1172\u001b[0m         \u001b[0;34m\"\"\"Return lists of bboxes for ticks' label1's and label2's.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1173\u001b[0m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0;32m-> 1174\u001b[0;31m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[0m\u001b[1;32m   1175\u001b[0m                 [tick.label2.get_window_extent(renderer)\n\u001b[1;32m   1176\u001b[0m                  for tick in ticks if tick.label2.get_visible()])\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1172\u001b[0m         \u001b[0;34m\"\"\"Return lists of bboxes for ticks' label1's and label2's.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1173\u001b[0m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0;32m-> 1174\u001b[0;31m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[0m\u001b[1;32m   1175\u001b[0m                 [tick.label2.get_window_extent(renderer)\n\u001b[1;32m   1176\u001b[0m                  for tick in ticks if tick.label2.get_visible()])\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mget_window_extent\u001b[0;34m(self, renderer, dpi)\u001b[0m\n\u001b[1;32m    903\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Cannot get window extent w/o renderer'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    904\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 905\u001b[0;31m         \u001b[0mbbox\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdescent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    906\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_unitless_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    907\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_layout\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mclean_line\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    299\u001b[0m                 w, h, d = renderer.get_text_width_height_descent(\n\u001b[0;32m--> 300\u001b[0;31m                     clean_line, self._fontproperties, ismath=ismath)\n\u001b[0m\u001b[1;32m    301\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    302\u001b[0m                 \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mget_text_width_height_descent\u001b[0;34m(self, s, prop, ismath)\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0mflags\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hinting_flag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0mfont\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_agg_font\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m         \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_width_height\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# width and height of unrotated string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_descent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "qCXQNWjEpp_o"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}